// Defined twice so we only need to load one of two files to get it
window.getProgress = () => JSON.parse(localStorage.getItem('dec-2022-progress')) || {};

let currentState = [];

let checkForStuff = function () {
  let parts = window.location.href.split('/');
  let end = parts[parts.length - 1];
  if (end === 'mentally_stoned.html') {
    let progress = getProgress();
    let stars = [...'abcdefghi'].filter(i => '2' + i in progress).length;
    for (let i = 1; i <= 10; i++) {
      if ((i > 1) && !('2' + '.abcdefghij'[i - 1] in progress)) {
        [...document.getElementsByClassName('2' + '.abcdefghij'[i])].forEach(i => i.style.display = 'none');
      }
    }
    document.getElementById('stars').innerText = stars + ' star' + ((stars !== 1) ? 's' : '');
  } else if (end === 'prelude.html') {
    let progress = getProgress();
    let stars = [...'abcdefghi'].filter(i => '2' + i in progress).length;
    document.getElementById('stars').innerText = stars + ' star' + ((stars !== 1) ? 's' : '');
  } else if (end === 'epilogue.html') {
    let progress = getProgress();
    let stars = [...'abcdefghi'].filter(i => '2' + i in progress).length;
    if (stars < 9) {
      window.location.replace('forbidden.html');
    }
    document.getElementById('stars').innerText = stars + ' star' + ((stars !== 1) ? 's' : '');
  } else if (end[0] === 'p' && (end.length === 7 || end.includes('_data'))) {
    let progress = getProgress();
    let stars = [...'abcdefghi'].filter(i => '2' + i in progress).length;
    let i = +end[1];
    if ((i > 1) && !('2' + '.abcdefghi'[i - 1] in progress)) {
      window.location.replace('forbidden.html');
    }
    if (end.length === 7) {
      document.getElementById('stars').innerText = stars + ' star' + ((stars !== 1) ? 's' : '');
    }
  } else if (end === 'think_outside_the_box.html') {
    updateLoadOptions();
    write(description(currentLocation()));
    write(miniHelpText)
  }
}

let miniHelpText = '(Putting "enter X Y" (without the quotes) in the input below this text will put words X and Y into that box, and tell you the output.)';
let bigHelpText = ['List of commands:', 'enter X Y: puts words X and Y into the box in the current room, and tells you the output', 'forward: goes forward',
'help: shows this help text', 'in: goes in', 'left: turns left', 'out: goes out', 'right: turns right', 'undo: undoes the last movement you\'ve made',
'Note: You can write any command as its first letter, and you can enter multiple commands at once by separating them by semicolons (;). The features in this note are for convenience and not part of the puzzle.'];

let write = function (x) {
  let m = document.getElementById('main');
  if (m.children.length > 0) {
    m.appendChild(document.createElement('br'));
  }
  let s = document.createElement('span');
  s.innerText = x;
  m.appendChild(s);
}

let writeError = function (x) {
  let m = document.getElementById('main');
  if (m.children.length > 0) {
    m.appendChild(document.createElement('br'));
  }
  let s = document.createElement('span');
  s.innerText = x;
  s.style.color = 'red';
  m.appendChild(s);
}

let currentLocation = function () {
  return currentState.length > 0 ? currentState[currentState.length - 1] : 18;
}

let description = function (x) {
  return table5[x];
}

let getState = () => JSON.parse(localStorage.getItem('dec-2022-state')) || {};

let updateLoadOptions = function () {
  let select = document.getElementById('load');
  let v = select.value;
  while (select.children.length > 0) {
    select.removeChild(select.children[0]);
  }
  let state = getState();
  let k = Object.keys(state);
  k.sort();
  for (let i of k) {
    let c = document.createElement('option');
    c.value = i;
    c.innerText = i;
    select.appendChild(c);
  }
  if (k.includes(v)) {
    select.value = v;
  }
}

let scrollMain = function () {
  document.getElementById('main').scrollTop = document.getElementById('main').scrollHeight;
}

let saveState = function () {
  let state = getState();
  let val = document.getElementById('save').value;
  if (!val) {
    alert('Empty save name!');
    return;
  }
  state[val] = currentState;
  localStorage.setItem('dec-2022-state', JSON.stringify(state));
  updateLoadOptions();
  write('[Saved "' + val + '"]');
  scrollMain();
}

let loadState = function () {
  let state = getState();
  let val = document.getElementById('load').value;
  if (!(val in state)) {
    alert('Loading non-existant save!');
    return;
  }
  currentState = state[val];
  write('[Loaded "' + val + '"]');
  write(description(currentLocation()));
  scrollMain();
}

let newLocationMessage = function () {
  if (different.includes(currentLocation())) {
    return 'As always when you enter a new room, you get disoriented and end up facing ... hm, directions don\'t seem to make sense here.';
  } else {
    return 'As always when you enter a new room, you get disoriented and end up facing in a certain slightly-helpful direction.';
  }
}

let move = function (x) {
  if (x === 'f') {
    if (different.includes(currentLocation())) {
      write('Going forward doesn\'t seem to make sense here.');
      write(description(currentLocation()));
    } else {
      write('You go forward.');
      currentState.push(table1[currentLocation()]);
      write(newLocationMessage());
      write(description(currentLocation()));
    }
  }
  if (x === 'h') {
    for (let i of bigHelpText) {
      write(i);
    }
  }
  if (x === 'i') {
    write('You go in.');
    currentState.push(table4[currentLocation()]);
    write(newLocationMessage());
    write(description(currentLocation()));
  }
  if (x === 'l') {
    if (different.includes(currentLocation())) {
      write('Turning left doesn\'t seem to make sense here.');
      write(description(currentLocation()));
    } else {
      write('You turn left.');
      currentState.push(table2[currentLocation()]);
      write(description(currentLocation()));
    }
  }
  if (x === 'o') {
    write('You go out.');
    currentState.push(table4[currentLocation()]);
    write(newLocationMessage());
    write(description(currentLocation()));
  }
  if (x === 'r') {
    if (different.includes(currentLocation())) {
      write('Turning right doesn\'t seem to make sense here.');
      write(description(currentLocation()));
    } else {
      write('You turn right.');
      currentState.push(table3[currentLocation()]);
      write(description(currentLocation()));
    }
  }
  if (x === 'u') {
    if (currentState.length === 0) {
      write('Nothing to undo!');
      return;
    }
    currentState.pop();
    write('[Undone]');
    write(description(currentLocation()));
  }
}

let enter = function (x) {
  let letter = table6[currentLocation()];
  if (x.length !== 2) {
    writeError('Not two words');
    return;
  }
  x = x.map(i => i.toUpperCase());
  if (x.every(i => [...i].filter(j => j === letter).length !== 1)) {
    writeError('Neither word has uniqueness');
    return;
  }
  if (x.every(i => [...i].filter(j => j === letter).length === 1)) {
    writeError('Both words have uniqueness');
    return;
  }
  let first;
  let second;
  if ([...x[0]].filter(j => j === letter).length === 1) {
    first = x[0];
    second = x[1];
  } else {
    first = x[1];
    second = x[0];
  }
  if (first.indexOf(letter) >= second.length) {
    writeError('Word too short');
    return;
  }
  write(second[first.indexOf(letter)]);
}

let isValidFormat = function (x) {
  if (x === '') {
    return true;
  }
  let m = String.fromCharCode(Math.max(...[...x].map(i => i.charCodeAt(0))));
  let parts = x.split(m);
  return x === '' || (parts.length === 2 && parts.every(isValidFormat));
}

let submit = function (x) {
  if (x === '3') {
    let out = document.getElementById('output');
    let val = document.getElementById('input-3').value;
    let norm = val.toUpperCase().replace(/ /g, '');
    if (!norm.match(/^[A-Z]*$/)) {
      out.style.color = 'red';
      out.style.textAlign = '';
      out.innerText = norm + ': Number contains non-letter(s)';
    } else if (!isValidFormat(norm)) {
      out.style.color = 'red';
      out.style.textAlign = '';
      out.innerText = norm + ': Number is invalid';
    } else if (norm === '') {
      out.style.color = 'red';
      out.style.textAlign = '';
      out.innerText = norm + ': Number is zero';
    }  else if (!valid1.includes(norm)) {
      out.style.color = 'red';
      out.style.textAlign = '';
      out.innerText = norm + ': Number is too large';
    } else if (!valid2.includes(norm)) {
      out.style.color = 'orange';
      out.style.textAlign = '';
      out.innerText = norm + ': Number is OK, but name contains non-letter(s)';
    } else if (!(norm in valid3)) {
      out.style.color = 'orange';
      out.style.textAlign = '';
      out.innerText = norm + ': Number is OK, but name is invalid';
    } else if (!(norm in special)) {
      out.style.color = '';
      out.style.textAlign = '';
      out.innerText = norm + ': ' + valid3[norm];
    } else {
      out.style.color = '';
      out.style.textAlign = 'center';
      out.innerText = '';
      let c0 = document.createElement('span');
      c0.innerText = norm;
      let c1 = document.createElement('span');
      c1.innerText = special[norm][0];
      c1.style.fontSize = '40px';
      let c2 = document.createElement('div');
      let i1 = document.createElement('img');
      i1.width = '320';
      i1.height = '320';
      i1.src = 'resources/' + norm + '1.png';
      c2.appendChild(i1);
      let i2 = document.createElement('img');
      i2.width = '320';
      i2.height = '320';
      i2.src = 'resources/' + norm + '2.png';
      c2.appendChild(i2);
      let c3 = document.createElement('span');
      c3.innerText = special[norm][1];
      c3.style.fontSize = (special[norm][1].length > 20) ? '30px' : '40px';
      let c4 = null;
      if (special[norm][2]) {
        c4 = document.createElement('span');
        c4.innerText = special[norm][2];
        c4.style.fontSize = '40px';
      }
      out.appendChild(c0);
      out.appendChild(document.createElement('br'));
      out.appendChild(document.createElement('br'));
      out.appendChild(c1);
      out.appendChild(c2);
      out.appendChild(c3);
      if (c4) {
        out.appendChild(document.createElement('br'));
        out.appendChild(c4);
      }
    }
  } else if (x === '4') {
    let val = document.getElementById('input-4').value;
    // Good to clear current command especially in this case.
    document.getElementById('input-4').value = '';
    val = val.split(';').map(i => i.split(/\s/g).filter(j => j));
    for (i of val) {
      if (i.length > 0) {
        write('> ' + i.join(' '));
        let crucial = i[0][0].toLowerCase();
        if ('fhiloru'.includes(crucial)) {
          move(crucial);
        } else if (crucial === 'e') {
          enter(i.slice(1));
        } else {
          write('Invalid command. You can use "help" to see possible commands.');
        }
        scrollMain();
      }
    }
  }
}

window.addEventListener('load', checkForStuff);

// data

let valid1 = ['A', 'AB', 'ABA', 'ABAC', 'ABACA', 'ABACAB', 'ABACABA', 'ABACB', 'ABACBA', 'ABAD', 'ABADA', 'ABADAB', 'ABADABA', 'ABADABAC', 'ABADABACA', 'ABADABACAB', 'ABADABACABA', 'ABADABACB', 'ABADABACBA', 'ABADABC', 'ABADABCA', 'ABADABCAB', 'ABADABCABA', 'ABADABCB', 'ABADABCBA', 'ABADAC', 'ABADACA', 'ABADACAB', 'ABADACABA', 'ABADACB', 'ABADACBA', 'ABADB', 'ABADBA', 'ABADBAC', 'ABADBACA', 'ABADBACAB', 'ABADBACABA', 'ABADBACB', 'ABADBACBA', 'ABADBC', 'ABADBCA', 'ABADBCAB', 'ABADBCABA', 'ABADBCB', 'ABADBCBA', 'ABADC', 'ABADCA', 'ABADCAB', 'ABADCABA', 'ABADCB', 'ABADCBA', 'ABC', 'ABCA', 'ABCAB', 'ABCABA', 'ABCB', 'ABCBA', 'ABD', 'ABDA', 'ABDAB', 'ABDABA', 'ABDABAC', 'ABDABACA', 'ABDABACAB', 'ABDABACABA', 'ABDABACB', 'ABDABACBA', 'ABDABC', 'ABDABCA', 'ABDABCAB', 'ABDABCABA', 'ABDABCB', 'ABDABCBA', 'ABDAC', 'ABDACA', 'ABDACAB', 'ABDACABA', 'ABDACB', 'ABDACBA', 'ABDB', 'ABDBA', 'ABDBAC', 'ABDBACA', 'ABDBACAB', 'ABDBACABA', 'ABDBACB', 'ABDBACBA', 'ABDBC', 'ABDBCA', 'ABDBCAB', 'ABDBCABA', 'ABDBCB', 'ABDBCBA', 'ABDC', 'ABDCA', 'ABDCAB', 'ABDCABA', 'ABDCB', 'ABDCBA', 'AC', 'ACA', 'ACAB', 'ACABA', 'ACABAD', 'ACABADA', 'ACABADAB', 'ACABADABA', 'ACABADABAC', 'ACABADABACA', 'ACABADABACAB', 'ACABADABACABA', 'ACABADABACB', 'ACABADABACBA', 'ACABADABC', 'ACABADABCA', 'ACABADABCAB', 'ACABADABCABA', 'ACABADABCB', 'ACABADABCBA', 'ACABADAC', 'ACABADACA', 'ACABADACAB', 'ACABADACABA', 'ACABADACB', 'ACABADACBA', 'ACABADB', 'ACABADBA', 'ACABADBAC', 'ACABADBACA', 'ACABADBACAB', 'ACABADBACABA', 'ACABADBACB', 'ACABADBACBA', 'ACABADBC', 'ACABADBCA', 'ACABADBCAB', 'ACABADBCABA', 'ACABADBCB', 'ACABADBCBA', 'ACABADC', 'ACABADCA', 'ACABADCAB', 'ACABADCABA', 'ACABADCB', 'ACABADCBA', 'ACABD', 'ACABDA', 'ACABDAB', 'ACABDABA', 'ACABDABAC', 'ACABDABACA', 'ACABDABACAB', 'ACABDABACABA', 'ACABDABACB', 'ACABDABACBA', 'ACABDABC', 'ACABDABCA', 'ACABDABCAB', 'ACABDABCABA', 'ACABDABCB', 'ACABDABCBA', 'ACABDAC', 'ACABDACA', 'ACABDACAB', 'ACABDACABA', 'ACABDACB', 'ACABDACBA', 'ACABDB', 'ACABDBA', 'ACABDBAC', 'ACABDBACA', 'ACABDBACAB', 'ACABDBACABA', 'ACABDBACB', 'ACABDBACBA', 'ACABDBC', 'ACABDBCA', 'ACABDBCAB', 'ACABDBCABA', 'ACABDBCB', 'ACABDBCBA', 'ACABDC', 'ACABDCA', 'ACABDCAB', 'ACABDCABA', 'ACABDCB', 'ACABDCBA', 'ACAD', 'ACADA', 'ACADAB', 'ACADABA', 'ACADABAC', 'ACADABACA', 'ACADABACAB', 'ACADABACABA', 'ACADABACB', 'ACADABACBA', 'ACADABC', 'ACADABCA', 'ACADABCAB', 'ACADABCABA', 'ACADABCB', 'ACADABCBA', 'ACADAC', 'ACADACA', 'ACADACAB', 'ACADACABA', 'ACADACB', 'ACADACBA', 'ACADB', 'ACADBA', 'ACADBAC', 'ACADBACA', 'ACADBACAB', 'ACADBACABA', 'ACADBACB', 'ACADBACBA', 'ACADBC', 'ACADBCA', 'ACADBCAB', 'ACADBCABA', 'ACADBCB', 'ACADBCBA', 'ACADC', 'ACADCA', 'ACADCAB', 'ACADCABA', 'ACADCB', 'ACADCBA', 'ACB', 'ACBA', 'ACBAD', 'ACBADA', 'ACBADAB', 'ACBADABA', 'ACBADABAC', 'ACBADABACA', 'ACBADABACAB', 'ACBADABACABA', 'ACBADABACB', 'ACBADABACBA', 'ACBADABC', 'ACBADABCA', 'ACBADABCAB', 'ACBADABCABA', 'ACBADABCB', 'ACBADABCBA', 'ACBADAC', 'ACBADACA', 'ACBADACAB', 'ACBADACABA', 'ACBADACB', 'ACBADACBA', 'ACBADB', 'ACBADBA', 'ACBADBAC', 'ACBADBACA', 'ACBADBACAB', 'ACBADBACABA', 'ACBADBACB', 'ACBADBACBA', 'ACBADBC', 'ACBADBCA', 'ACBADBCAB', 'ACBADBCABA', 'ACBADBCB', 'ACBADBCBA', 'ACBADC', 'ACBADCA', 'ACBADCAB', 'ACBADCABA', 'ACBADCB', 'ACBADCBA', 'ACBD', 'ACBDA', 'ACBDAB', 'ACBDABA', 'ACBDABAC', 'ACBDABACA', 'ACBDABACAB', 'ACBDABACABA', 'ACBDABACB', 'ACBDABACBA', 'ACBDABC', 'ACBDABCA', 'ACBDABCAB', 'ACBDABCABA', 'ACBDABCB', 'ACBDABCBA', 'ACBDAC', 'ACBDACA', 'ACBDACAB', 'ACBDACABA', 'ACBDACB', 'ACBDACBA', 'ACBDB', 'ACBDBA', 'ACBDBAC', 'ACBDBACA', 'ACBDBACAB', 'ACBDBACABA', 'ACBDBACB', 'ACBDBACBA', 'ACBDBC', 'ACBDBCA', 'ACBDBCAB', 'ACBDBCABA', 'ACBDBCB', 'ACBDBCBA', 'ACBDC', 'ACBDCA', 'ACBDCAB', 'ACBDCABA', 'ACBDCB', 'ACBDCBA', 'ACD', 'ACDA', 'ACDAB', 'ACDABA', 'ACDABAC', 'ACDABACA', 'ACDABACAB', 'ACDABACABA', 'ACDABACB', 'ACDABACBA', 'ACDABC', 'ACDABCA', 'ACDABCAB', 'ACDABCABA', 'ACDABCB', 'ACDABCBA', 'ACDAC', 'ACDACA', 'ACDACAB', 'ACDACABA', 'ACDACB', 'ACDACBA', 'ACDB', 'ACDBA', 'ACDBAC', 'ACDBACA', 'ACDBACAB', 'ACDBACABA', 'ACDBACB', 'ACDBACBA', 'ACDBC', 'ACDBCA', 'ACDBCAB', 'ACDBCABA', 'ACDBCB', 'ACDBCBA', 'ACDC', 'ACDCA', 'ACDCAB', 'ACDCABA', 'ACDCB', 'ACDCBA', 'AD', 'ADA', 'ADAB', 'ADABA', 'ADABAC', 'ADABACA', 'ADABACAB', 'ADABACABA', 'ADABACB', 'ADABACBA', 'ADABC', 'ADABCA', 'ADABCAB', 'ADABCABA', 'ADABCB', 'ADABCBA', 'ADAC', 'ADACA', 'ADACAB', 'ADACABA', 'ADACB', 'ADACBA', 'ADB', 'ADBA', 'ADBAC', 'ADBACA', 'ADBACAB', 'ADBACABA', 'ADBACB', 'ADBACBA', 'ADBC', 'ADBCA', 'ADBCAB', 'ADBCABA', 'ADBCB', 'ADBCBA', 'ADC', 'ADCA', 'ADCAB', 'ADCABA', 'ADCB', 'ADCBA', 'B', 'BA', 'BAC', 'BACA', 'BACAB', 'BACABA', 'BACB', 'BACBA', 'BAD', 'BADA', 'BADAB', 'BADABA', 'BADABAC', 'BADABACA', 'BADABACAB', 'BADABACABA', 'BADABACB', 'BADABACBA', 'BADABC', 'BADABCA', 'BADABCAB', 'BADABCABA', 'BADABCB', 'BADABCBA', 'BADAC', 'BADACA', 'BADACAB', 'BADACABA', 'BADACB', 'BADACBA', 'BADB', 'BADBA', 'BADBAC', 'BADBACA', 'BADBACAB', 'BADBACABA', 'BADBACB', 'BADBACBA', 'BADBC', 'BADBCA', 'BADBCAB', 'BADBCABA', 'BADBCB', 'BADBCBA', 'BADC', 'BADCA', 'BADCAB', 'BADCABA', 'BADCB', 'BADCBA', 'BC', 'BCA', 'BCAB', 'BCABA', 'BCABAD', 'BCABD', 'BCABDA', 'BCABDAB', 'BCABDABA', 'BCABDABAC', 'BCABDABACA', 'BCABDABACAB', 'BCABDABACABA', 'BCABDABACB', 'BCABDABACBA', 'BCABDABC', 'BCABDABCA', 'BCABDABCAB', 'BCABDABCABA', 'BCABDABCB', 'BCABDABCBA', 'BCABDAC', 'BCABDACA', 'BCABDACAB', 'BCABDACABA', 'BCABDACB', 'BCABDACBA', 'BCABDB', 'BCABDBA', 'BCABDBAC', 'BCABDBACA', 'BCABDBACAB', 'BCABDBACABA', 'BCABDBACB', 'BCABDBACBA', 'BCABDBC', 'BCABDBCA', 'BCABDBCAB', 'BCABDBCABA', 'BCABDBCB', 'BCABDBCBA', 'BCABDC', 'BCABDCA', 'BCABDCAB', 'BCABDCABA', 'BCABDCB', 'BCABDCBA', 'BCAD', 'BCADA', 'BCADAB', 'BCADABA', 'BCADABAC', 'BCADABACA', 'BCADABACAB', 'BCADABACABA', 'BCADABACB', 'BCADABACBA', 'BCADABC', 'BCADABCA', 'BCADABCAB', 'BCADABCABA', 'BCADABCB', 'BCADABCBA', 'BCADAC', 'BCADACA', 'BCADACAB', 'BCADACABA', 'BCADACB', 'BCADACBA', 'BCADB', 'BCADBA', 'BCADBAC', 'BCADBACA', 'BCADBACAB', 'BCADBACABA', 'BCADBACB', 'BCADBACBA', 'BCADBC', 'BCADBCA', 'BCADBCAB', 'BCADBCABA', 'BCADBCB', 'BCADBCBA', 'BCADC', 'BCADCA', 'BCADCAB', 'BCADCABA', 'BCADCB', 'BCADCBA', 'BCB', 'BCBA', 'BCBAD', 'BCBADA', 'BCBADAB', 'BCBADABA', 'BCBADABAC', 'BCBADABACA', 'BCBADABACAB', 'BCBADABACABA', 'BCBADABACB', 'BCBADABACBA', 'BCBADABC', 'BCBADABCA', 'BCBADABCAB', 'BCBADABCABA', 'BCBADABCB', 'BCBADABCBA', 'BCBADAC', 'BCBADACA', 'BCBADACAB', 'BCBADACABA', 'BCBADACB', 'BCBADACBA', 'BCBADB', 'BCBADBA', 'BCBADBAC', 'BCBADBACA', 'BCBADBACAB', 'BCBADBACABA', 'BCBADBACB', 'BCBADBACBA', 'BCBADBC', 'BCBADBCA', 'BCBADBCAB', 'BCBADBCABA', 'BCBADBCB', 'BCBADBCBA', 'BCBADC', 'BCBADCA', 'BCBADCAB', 'BCBADCABA', 'BCBADCB', 'BCBADCBA', 'BCBD', 'BCBDA', 'BCBDAB', 'BCBDABA', 'BCBDABAC', 'BCBDABACA', 'BCBDABACAB', 'BCBDABACABA', 'BCBDABACB', 'BCBDABACBA', 'BCBDABC', 'BCBDABCA', 'BCBDABCAB', 'BCBDABCABA', 'BCBDABCB', 'BCBDABCBA', 'BCBDAC', 'BCBDACA', 'BCBDACAB', 'BCBDACABA', 'BCBDACB', 'BCBDACBA', 'BCBDB', 'BCBDBA', 'BCBDBAC', 'BCBDBACA', 'BCBDBACAB', 'BCBDBACABA', 'BCBDBACB', 'BCBDBACBA', 'BCBDBC', 'BCBDBCA', 'BCBDBCAB', 'BCBDBCABA', 'BCBDBCB', 'BCBDBCBA', 'BCBDC', 'BCBDCA', 'BCBDCAB', 'BCBDCABA', 'BCBDCB', 'BCBDCBA', 'BCD', 'BCDA', 'BCDAB', 'BCDABA', 'BCDABAC', 'BCDABACA', 'BCDABACAB', 'BCDABACABA', 'BCDABACB', 'BCDABACBA', 'BCDABC', 'BCDABCA', 'BCDABCAB', 'BCDABCABA', 'BCDABCB', 'BCDABCBA', 'BCDAC', 'BCDACA', 'BCDACAB', 'BCDACABA', 'BCDACB', 'BCDACBA', 'BCDB', 'BCDBA', 'BCDBAC', 'BCDBACA', 'BCDBACAB', 'BCDBACABA', 'BCDBACB', 'BCDBACBA', 'BCDBC', 'BCDBCA', 'BCDBCAB', 'BCDBCABA', 'BCDBCB', 'BCDBCBA', 'BCDC', 'BCDCA', 'BCDCAB', 'BCDCABA', 'BCDCB', 'BCDCBA', 'BD', 'BDA', 'BDAB', 'BDABA', 'BDABAC', 'BDABACA', 'BDABACAB', 'BDABACABA', 'BDABACB', 'BDABACBA', 'BDABC', 'BDABCA', 'BDABCAB', 'BDABCABA', 'BDABCB', 'BDABCBA', 'BDAC', 'BDACA', 'BDACAB', 'BDACABA', 'BDACB', 'BDACBA', 'BDB', 'BDBA', 'BDBAC', 'BDBACA', 'BDBACAB', 'BDBACABA', 'BDBACB', 'BDBACBA', 'BDBC', 'BDBCA', 'BDBCAB', 'BDBCABA', 'BDBCB', 'BDBCBA', 'BDC', 'BDCA', 'BDCAB', 'BDCABA', 'BDCB', 'BDCBA', 'C', 'CA', 'CAB', 'CABA', 'CABAD', 'CABADA', 'CABADAB', 'CABADABA', 'CABADABAC', 'CABADABACA', 'CABADABACAB', 'CABADABACABA', 'CABADABACB', 'CABADABACBA', 'CABADABC', 'CABADABCA', 'CABADABCAB', 'CABADABCABA', 'CABADABCB', 'CABADABCBA', 'CABADAC', 'CABADACA', 'CABADACAB', 'CABADACABA', 'CABADACB', 'CABADACBA', 'CABADB', 'CABADBA', 'CABADBAC', 'CABADBACA', 'CABADBACAB', 'CABADBACABA', 'CABADBACB', 'CABADBACBA', 'CABADBC', 'CABADBCA', 'CABADBCAB', 'CABADBCABA', 'CABADBCB', 'CABADBCBA', 'CABADC', 'CABADCA', 'CABADCAB', 'CABADCABA', 'CABADCB', 'CABADCBA', 'CABD', 'CABDA', 'CABDAB', 'CABDABA', 'CABDABAC', 'CABDABACA', 'CABDABACAB', 'CABDABACABA', 'CABDABACB', 'CABDABACBA', 'CABDABC', 'CABDABCA', 'CABDABCAB', 'CABDABCABA', 'CABDABCB', 'CABDABCBA', 'CABDAC', 'CABDACA', 'CABDACAB', 'CABDACABA', 'CABDACB', 'CABDACBA', 'CABDB', 'CABDBA', 'CABDBAC', 'CABDBACA', 'CABDBACAB', 'CABDBACABA', 'CABDBACB', 'CABDBACBA', 'CABDBC', 'CABDBCA', 'CABDBCAB', 'CABDBCABA', 'CABDBCB', 'CABDBCBA', 'CABDC', 'CABDCA', 'CABDCAB', 'CABDCABA', 'CABDCB', 'CABDCBA', 'CAD', 'CADA', 'CADAB', 'CADABA', 'CADABAC', 'CADABACA', 'CADABACAB', 'CADABACABA', 'CADABACB', 'CADABACBA', 'CADABC', 'CADABCA', 'CADABCAB', 'CADABCABA', 'CADABCB', 'CADABCBA', 'CADAC', 'CADACA', 'CADACAB', 'CADACABA', 'CADACB', 'CADACBA', 'CADB', 'CADBA', 'CADBAC', 'CADBACA', 'CADBACAB', 'CADBACABA', 'CADBACB', 'CADBACBA', 'CADBC', 'CADBCA', 'CADBCAB', 'CADBCABA', 'CADBCB', 'CADBCBA', 'CADC', 'CADCA', 'CADCAB', 'CADCABA', 'CADCB', 'CADCBA', 'CB', 'CBA', 'CBAD', 'CBADA', 'CBADAB', 'CBADABA', 'CBADABAC', 'CBADABACA', 'CBADABACAB', 'CBADABACABA', 'CBADABACB', 'CBADABACBA', 'CBADABC', 'CBADABCA', 'CBADABCAB', 'CBADABCABA', 'CBADABCB', 'CBADABCBA', 'CBADAC', 'CBADACA', 'CBADACAB', 'CBADACABA', 'CBADACB', 'CBADACBA', 'CBADB', 'CBADBA', 'CBADBAC', 'CBADBACA', 'CBADBACAB', 'CBADBACABA', 'CBADBACB', 'CBADBACBA', 'CBADBC', 'CBADBCA', 'CBADBCAB', 'CBADBCABA', 'CBADBCB', 'CBADBCBA', 'CBADC', 'CBADCA', 'CBADCAB', 'CBADCABA', 'CBADCB', 'CBADCBA', 'CBD', 'CBDA', 'CBDAB', 'CBDABA', 'CBDABAC', 'CBDABACA', 'CBDABACAB', 'CBDABACABA', 'CBDABACB', 'CBDABACBA', 'CBDABC', 'CBDABCA', 'CBDABCAB', 'CBDABCABA', 'CBDABCB', 'CBDABCBA', 'CBDAC', 'CBDACA', 'CBDACAB', 'CBDACABA', 'CBDACB', 'CBDACBA', 'CBDB', 'CBDBA', 'CBDBAC', 'CBDBACA', 'CBDBACAB', 'CBDBACABA', 'CBDBACB', 'CBDBACBA', 'CBDBC', 'CBDBCA', 'CBDBCAB', 'CBDBCABA', 'CBDBCB', 'CBDBCBA', 'CBDC', 'CBDCA', 'CBDCAB', 'CBDCABA', 'CBDCB', 'CBDCBA', 'CD', 'CDA', 'CDAB', 'CDABA', 'CDABAC', 'CDABACA', 'CDABACAB', 'CDABACABA', 'CDABACB', 'CDABACBA', 'CDABC', 'CDABCA', 'CDABCAB', 'CDABCABA', 'CDABCB', 'CDABCBA', 'CDAC', 'CDACA', 'CDACAB', 'CDACABA', 'CDACB', 'CDACBA', 'CDB', 'CDBA', 'CDBAC', 'CDBACA', 'CDBACAB', 'CDBACABA', 'CDBACB', 'CDBACBA', 'CDBC', 'CDBCA', 'CDBCAB', 'CDBCABA', 'CDBCB', 'CDBCBA', 'CDC', 'CDCA', 'CDCAB', 'CDCABA', 'CDCB', 'CDCBA', 'D', 'DA', 'DAB', 'DABA', 'DABAC', 'DABACA', 'DABACAB', 'DABACABA', 'DABACB', 'DABACBA', 'DABC', 'DABCA', 'DABCAB', 'DABCABA', 'DABCB', 'DABCBA', 'DAC', 'DACA', 'DACAB', 'DACABA', 'DACB', 'DACBA', 'DB', 'DBA', 'DBAC', 'DBACA', 'DBACAB', 'DBACABA', 'DBACB', 'DBACBA', 'DBC', 'DBCA', 'DBCAB', 'DBCABA', 'DBCB', 'DBCBA', 'DC', 'DCA', 'DCAB', 'DCABA', 'DCB', 'DCBA'];

let valid2 = ['A', 'AB', 'ABA', 'ABAC', 'ABACA', 'ABACAB', 'ABACABA', 'ABACB', 'ABACBA', 'ABAD', 'ABADA', 'ABADAB', 'ABADABA', 'ABADABAC', 'ABADABACA', 'ABADABACAB', 'ABADABACABA', 'ABADABACB', 'ABADABACBA', 'ABADABC', 'ABADABCA', 'ABADABCAB', 'ABADABCABA', 'ABADABCB', 'ABADABCBA', 'ABADAC', 'ABADACA', 'ABADACAB', 'ABADACABA', 'ABADACB', 'ABADACBA', 'ABADB', 'ABADBA', 'ABADBAC', 'ABADBACA', 'ABADBACAB', 'ABADBACABA', 'ABADBACB', 'ABADBACBA', 'ABADBC', 'ABADBCA', 'ABADBCAB', 'ABADBCABA', 'ABADBCB', 'ABADBCBA', 'ABADC', 'ABADCA', 'ABADCAB', 'ABADCABA', 'ABADCB', 'ABADCBA', 'ABC', 'ABCA', 'ABCAB', 'ABCABA', 'ABCBA', 'ABD', 'ABDA', 'ABDAB', 'ABDABA', 'ABDABAC', 'ABDABACA', 'ABDABACABA', 'ABDABACB', 'ABDABACBA', 'ABDABC', 'ABDABCA', 'ABDABCAB', 'ABDABCABA', 'ABDABCB', 'ABDABCBA', 'ABDAC', 'ABDACA', 'ABDACAB', 'ABDACABA', 'ABDACB', 'ABDACBA', 'ABDB', 'ABDBA', 'ABDBAC', 'ABDBACA', 'ABDBACAB', 'ABDBACABA', 'ABDBACB', 'ABDBACBA', 'ABDBC', 'ABDBCA', 'ABDBCAB', 'ABDBCB', 'ABDBCBA', 'ABDC', 'ABDCA', 'ABDCAB', 'ABDCABA', 'ABDCB', 'ABDCBA', 'AC', 'ACA', 'ACAB', 'ACABA', 'ACABAD', 'ACABADA', 'ACABADAB', 'ACABADABA', 'ACABADABAC', 'ACABADABACA', 'ACABADABACAB', 'ACABADABACABA', 'ACABADABACB', 'ACABADABACBA', 'ACABADABC', 'ACABADABCA', 'ACABADABCAB', 'ACABADABCABA', 'ACABADABCB', 'ACABADABCBA', 'ACABADAC', 'ACABADACA', 'ACABADACABA', 'ACABADACB', 'ACABADACBA', 'ACABADB', 'ACABADBA', 'ACABADBAC', 'ACABADBACA', 'ACABADBACABA', 'ACABADBC', 'ACABADBCA', 'ACABADBCAB', 'ACABADBCABA', 'ACABADBCB', 'ACABADBCBA', 'ACABADC', 'ACABADCA', 'ACABADCAB', 'ACABADCABA', 'ACABADCB', 'ACABADCBA', 'ACABD', 'ACABDA', 'ACABDAB', 'ACABDABA', 'ACABDABAC', 'ACABDABACA', 'ACABDABACAB', 'ACABDABACABA', 'ACABDABACB', 'ACABDABACBA', 'ACABDABC', 'ACABDABCA', 'ACABDABCAB', 'ACABDABCABA', 'ACABDABCB', 'ACABDABCBA', 'ACABDAC', 'ACABDACA', 'ACABDACAB', 'ACABDACABA', 'ACABDACB', 'ACABDACBA', 'ACABDB', 'ACABDBA', 'ACABDBAC', 'ACABDBACA', 'ACABDBACAB', 'ACABDBACABA', 'ACABDBACB', 'ACABDBACBA', 'ACABDBC', 'ACABDBCA', 'ACABDBCAB', 'ACABDBCABA', 'ACABDBCB', 'ACABDBCBA', 'ACABDC', 'ACABDCA', 'ACABDCAB', 'ACABDCABA', 'ACABDCB', 'ACABDCBA', 'ACAD', 'ACADA', 'ACADAB', 'ACADABA', 'ACADABAC', 'ACADABACA', 'ACADABACAB', 'ACADABACABA', 'ACADABACB', 'ACADABACBA', 'ACADABC', 'ACADABCA', 'ACADABCAB', 'ACADABCABA', 'ACADABCB', 'ACADABCBA', 'ACADAC', 'ACADACA', 'ACADACAB', 'ACADACABA', 'ACADACB', 'ACADACBA', 'ACADB', 'ACADBA', 'ACADBAC', 'ACADBACA', 'ACADBACAB', 'ACADBACABA', 'ACADBACB', 'ACADBACBA', 'ACADBC', 'ACADBCA', 'ACADBCAB', 'ACADBCABA', 'ACADBCB', 'ACADBCBA', 'ACADC', 'ACADCA', 'ACADCAB', 'ACADCABA', 'ACADCB', 'ACADCBA', 'ACB', 'ACBA', 'ACBAD', 'ACBADA', 'ACBADAB', 'ACBADABA', 'ACBADABAC', 'ACBADABACA', 'ACBADABACAB', 'ACBADABACABA', 'ACBADABACB', 'ACBADABACBA', 'ACBADABC', 'ACBADABCA', 'ACBADABCAB', 'ACBADABCABA', 'ACBADABCB', 'ACBADABCBA', 'ACBADAC', 'ACBADACA', 'ACBADACAB', 'ACBADACABA', 'ACBADACB', 'ACBADACBA', 'ACBADB', 'ACBADBA', 'ACBADBAC', 'ACBADBACA', 'ACBADBACAB', 'ACBADBACABA', 'ACBADBACB', 'ACBADBACBA', 'ACBADBC', 'ACBADBCA', 'ACBADBCAB', 'ACBADBCABA', 'ACBADBCB', 'ACBADBCBA', 'ACBADC', 'ACBADCA', 'ACBADCAB', 'ACBADCABA', 'ACBADCB', 'ACBADCBA', 'ACBD', 'ACBDA', 'ACBDAB', 'ACBDABA', 'ACBDABAC', 'ACBDABACA', 'ACBDABACAB', 'ACBDABACABA', 'ACBDABACB', 'ACBDABC', 'ACBDABCA', 'ACBDABCAB', 'ACBDABCABA', 'ACBDABCB', 'ACBDABCBA', 'ACBDAC', 'ACBDACA', 'ACBDACAB', 'ACBDACABA', 'ACBDACB', 'ACBDACBA', 'ACBDB', 'ACBDBA', 'ACBDBAC', 'ACBDBACA', 'ACBDBACAB', 'ACBDBACABA', 'ACBDBACB', 'ACBDBACBA', 'ACBDBC', 'ACBDBCA', 'ACBDBCAB', 'ACBDBCABA', 'ACBDBCB', 'ACBDBCBA', 'ACBDC', 'ACBDCA', 'ACBDCAB', 'ACBDCABA', 'ACBDCB', 'ACBDCBA', 'ACD', 'ACDA', 'ACDAB', 'ACDABA', 'ACDABAC', 'ACDABACA', 'ACDABACAB', 'ACDABACABA', 'ACDABACB', 'ACDABACBA', 'ACDABC', 'ACDABCA', 'ACDABCAB', 'ACDABCABA', 'ACDABCB', 'ACDABCBA', 'ACDAC', 'ACDACA', 'ACDACAB', 'ACDACABA', 'ACDACB', 'ACDACBA', 'ACDB', 'ACDBA', 'ACDBAC', 'ACDBACA', 'ACDBACAB', 'ACDBACABA', 'ACDBACB', 'ACDBACBA', 'ACDBC', 'ACDBCA', 'ACDBCAB', 'ACDBCABA', 'ACDBCB', 'ACDBCBA', 'ACDC', 'ACDCA', 'ACDCAB', 'ACDCABA', 'ACDCB', 'ACDCBA', 'AD', 'ADA', 'ADAB', 'ADABA', 'ADABAC', 'ADABACA', 'ADABACAB', 'ADABACABA', 'ADABACBA', 'ADABC', 'ADABCA', 'ADABCAB', 'ADABCABA', 'ADABCB', 'ADABCBA', 'ADAC', 'ADACA', 'ADACAB', 'ADACABA', 'ADACB', 'ADACBA', 'ADB', 'ADBA', 'ADBAC', 'ADBACA', 'ADBACAB', 'ADBACABA', 'ADBACB', 'ADBACBA', 'ADBC', 'ADBCA', 'ADBCAB', 'ADBCABA', 'ADBCB', 'ADBCBA', 'ADC', 'ADCA', 'ADCAB', 'ADCABA', 'ADCB', 'ADCBA', 'B', 'BA', 'BAC', 'BACA', 'BACAB', 'BACB', 'BACBA', 'BAD', 'BADA', 'BADAB', 'BADABA', 'BADABAC', 'BADABACA', 'BADABACAB', 'BADABACABA', 'BADABACB', 'BADABACBA', 'BADABC', 'BADABCA', 'BADABCAB', 'BADABCABA', 'BADABCB', 'BADABCBA', 'BADAC', 'BADACA', 'BADACAB', 'BADACABA', 'BADACB', 'BADACBA', 'BADB', 'BADBA', 'BADBAC', 'BADBACA', 'BADBACAB', 'BADBACABA', 'BADBACB', 'BADBACBA', 'BADBC', 'BADBCA', 'BADBCAB', 'BADBCABA', 'BADBCB', 'BADBCBA', 'BADC', 'BADCA', 'BADCAB', 'BADCABA', 'BADCB', 'BADCBA', 'BC', 'BCA', 'BCAB', 'BCABA', 'BCABAD', 'BCABD', 'BCABDA', 'BCABDAB', 'BCABDABA', 'BCABDABACAB', 'BCABDABACABA', 'BCABDABACBA', 'BCABDABC', 'BCABDABCA', 'BCABDABCAB', 'BCABDABCB', 'BCABDABCBA', 'BCABDAC', 'BCABDACA', 'BCABDACAB', 'BCABDACABA', 'BCABDACB', 'BCABDACBA', 'BCABDB', 'BCABDBA', 'BCABDBAC', 'BCABDBACA', 'BCABDBACAB', 'BCABDBACABA', 'BCABDBACB', 'BCABDBACBA', 'BCABDBC', 'BCABDBCA', 'BCABDBCAB', 'BCABDBCABA', 'BCABDBCB', 'BCABDBCBA', 'BCABDC', 'BCABDCA', 'BCABDCAB', 'BCABDCABA', 'BCABDCB', 'BCABDCBA', 'BCAD', 'BCADA', 'BCADAB', 'BCADABA', 'BCADABAC', 'BCADABACA', 'BCADABACAB', 'BCADABACABA', 'BCADABACB', 'BCADABACBA', 'BCADABC', 'BCADABCA', 'BCADABCAB', 'BCADABCABA', 'BCADABCB', 'BCADABCBA', 'BCADAC', 'BCADACA', 'BCADACAB', 'BCADACABA', 'BCADACB', 'BCADACBA', 'BCADB', 'BCADBA', 'BCADBAC', 'BCADBACAB', 'BCADBACABA', 'BCADBACBA', 'BCADBC', 'BCADBCA', 'BCADBCAB', 'BCADBCABA', 'BCADBCB', 'BCADBCBA', 'BCADC', 'BCADCA', 'BCADCAB', 'BCADCABA', 'BCADCB', 'BCADCBA', 'BCB', 'BCBA', 'BCBAD', 'BCBADA', 'BCBADAB', 'BCBADABA', 'BCBADABAC', 'BCBADABACA', 'BCBADABACAB', 'BCBADABACABA', 'BCBADABACB', 'BCBADABACBA', 'BCBADABC', 'BCBADABCA', 'BCBADABCAB', 'BCBADABCABA', 'BCBADABCB', 'BCBADABCBA', 'BCBADAC', 'BCBADACA', 'BCBADACAB', 'BCBADACABA', 'BCBADACB', 'BCBADACBA', 'BCBADB', 'BCBADBA', 'BCBADBAC', 'BCBADBACA', 'BCBADBACAB', 'BCBADBACABA', 'BCBADBACB', 'BCBADBACBA', 'BCBADBC', 'BCBADBCA', 'BCBADBCAB', 'BCBADBCABA', 'BCBADBCB', 'BCBADBCBA', 'BCBADC', 'BCBADCA', 'BCBADCAB', 'BCBADCABA', 'BCBADCB', 'BCBADCBA', 'BCBD', 'BCBDA', 'BCBDAB', 'BCBDABA', 'BCBDABAC', 'BCBDABACA', 'BCBDABACAB', 'BCBDABACABA', 'BCBDABACB', 'BCBDABACBA', 'BCBDABC', 'BCBDABCA', 'BCBDABCAB', 'BCBDABCABA', 'BCBDABCB', 'BCBDABCBA', 'BCBDAC', 'BCBDACA', 'BCBDACAB', 'BCBDACABA', 'BCBDACB', 'BCBDACBA', 'BCBDB', 'BCBDBA', 'BCBDBAC', 'BCBDBACA', 'BCBDBACAB', 'BCBDBACABA', 'BCBDBACB', 'BCBDBACBA', 'BCBDBC', 'BCBDBCA', 'BCBDBCAB', 'BCBDBCABA', 'BCBDBCB', 'BCBDBCBA', 'BCBDC', 'BCBDCA', 'BCBDCAB', 'BCBDCABA', 'BCBDCB', 'BCBDCBA', 'BCD', 'BCDA', 'BCDAB', 'BCDABA', 'BCDABAC', 'BCDABACA', 'BCDABACAB', 'BCDABACABA', 'BCDABACB', 'BCDABACBA', 'BCDABC', 'BCDABCA', 'BCDABCAB', 'BCDABCABA', 'BCDABCB', 'BCDABCBA', 'BCDAC', 'BCDACA', 'BCDACAB', 'BCDACABA', 'BCDACB', 'BCDACBA', 'BCDB', 'BCDBA', 'BCDBAC', 'BCDBACA', 'BCDBACAB', 'BCDBACABA', 'BCDBACB', 'BCDBACBA', 'BCDBC', 'BCDBCA', 'BCDBCAB', 'BCDBCABA', 'BCDBCB', 'BCDBCBA', 'BCDC', 'BCDCA', 'BCDCAB', 'BCDCABA', 'BCDCB', 'BCDCBA', 'BD', 'BDA', 'BDAB', 'BDABA', 'BDABAC', 'BDABACA', 'BDABACAB', 'BDABACABA', 'BDABACB', 'BDABACBA', 'BDABC', 'BDABCA', 'BDABCAB', 'BDABCABA', 'BDABCB', 'BDABCBA', 'BDAC', 'BDACA', 'BDACAB', 'BDACABA', 'BDACB', 'BDACBA', 'BDB', 'BDBA', 'BDBAC', 'BDBACA', 'BDBACAB', 'BDBACABA', 'BDBACB', 'BDBACBA', 'BDBC', 'BDBCA', 'BDBCAB', 'BDBCABA', 'BDBCB', 'BDBCBA', 'BDC', 'BDCA', 'BDCAB', 'BDCABA', 'BDCB', 'BDCBA', 'C', 'CA', 'CAB', 'CABA', 'CABAD', 'CABADA', 'CABADAB', 'CABADABA', 'CABADABAC', 'CABADABACA', 'CABADABACAB', 'CABADABACABA', 'CABADABACB', 'CABADABACBA', 'CABADABC', 'CABADABCA', 'CABADABCAB', 'CABADABCABA', 'CABADABCB', 'CABADABCBA', 'CABADAC', 'CABADACA', 'CABADACAB', 'CABADACABA', 'CABADACB', 'CABADACBA', 'CABADB', 'CABADBA', 'CABADBAC', 'CABADBACA', 'CABADBACAB', 'CABADBACABA', 'CABADBACB', 'CABADBACBA', 'CABADBC', 'CABADBCA', 'CABADBCAB', 'CABADBCABA', 'CABADBCB', 'CABADBCBA', 'CABADC', 'CABADCA', 'CABADCAB', 'CABADCABA', 'CABADCB', 'CABADCBA', 'CABD', 'CABDA', 'CABDAB', 'CABDABA', 'CABDABAC', 'CABDABACA', 'CABDABACAB', 'CABDABACABA', 'CABDABACB', 'CABDABACBA', 'CABDABC', 'CABDABCA', 'CABDABCAB', 'CABDABCABA', 'CABDABCB', 'CABDABCBA', 'CABDACA', 'CABDACAB', 'CABDACABA', 'CABDACB', 'CABDACBA', 'CABDB', 'CABDBA', 'CABDBAC', 'CABDBACA', 'CABDBACAB', 'CABDBACABA', 'CABDBACB', 'CABDBACBA', 'CABDBC', 'CABDBCA', 'CABDBCAB', 'CABDBCABA', 'CABDBCB', 'CABDBCBA', 'CABDC', 'CABDCA', 'CABDCAB', 'CABDCABA', 'CABDCB', 'CABDCBA', 'CAD', 'CADA', 'CADAB', 'CADABA', 'CADABAC', 'CADABACA', 'CADABACAB', 'CADABACABA', 'CADABACB', 'CADABACBA', 'CADABC', 'CADABCA', 'CADABCAB', 'CADABCABA', 'CADABCB', 'CADABCBA', 'CADAC', 'CADACA', 'CADACAB', 'CADACABA', 'CADACB', 'CADACBA', 'CADB', 'CADBA', 'CADBAC', 'CADBACA', 'CADBACAB', 'CADBACABA', 'CADBACB', 'CADBACBA', 'CADBC', 'CADBCA', 'CADBCAB', 'CADBCABA', 'CADBCB', 'CADBCBA', 'CADC', 'CADCA', 'CADCAB', 'CADCABA', 'CADCB', 'CADCBA', 'CB', 'CBA', 'CBAD', 'CBADA', 'CBADAB', 'CBADABA', 'CBADABAC', 'CBADABACA', 'CBADABACAB', 'CBADABACABA', 'CBADABACB', 'CBADABACBA', 'CBADABC', 'CBADABCA', 'CBADABCAB', 'CBADABCABA', 'CBADABCB', 'CBADABCBA', 'CBADAC', 'CBADACA', 'CBADACAB', 'CBADACABA', 'CBADACB', 'CBADACBA', 'CBADB', 'CBADBA', 'CBADBAC', 'CBADBACA', 'CBADBACAB', 'CBADBACABA', 'CBADBACB', 'CBADBACBA', 'CBADBC', 'CBADBCAB', 'CBADBCABA', 'CBADBCB', 'CBADBCBA', 'CBADC', 'CBADCA', 'CBADCAB', 'CBADCABA', 'CBADCB', 'CBADCBA', 'CBD', 'CBDA', 'CBDAB', 'CBDABA', 'CBDABAC', 'CBDABACA', 'CBDABACAB', 'CBDABACABA', 'CBDABACB', 'CBDABACBA', 'CBDABC', 'CBDABCA', 'CBDABCAB', 'CBDABCABA', 'CBDABCB', 'CBDABCBA', 'CBDAC', 'CBDACA', 'CBDACAB', 'CBDACABA', 'CBDACB', 'CBDACBA', 'CBDB', 'CBDBA', 'CBDBAC', 'CBDBACA', 'CBDBACAB', 'CBDBACABA', 'CBDBACB', 'CBDBACBA', 'CBDBC', 'CBDBCA', 'CBDBCAB', 'CBDBCABA', 'CBDBCB', 'CBDBCBA', 'CBDC', 'CBDCA', 'CBDCAB', 'CBDCABA', 'CBDCB', 'CBDCBA', 'CD', 'CDA', 'CDAB', 'CDABA', 'CDABAC', 'CDABACA', 'CDABACAB', 'CDABACABA', 'CDABACB', 'CDABACBA', 'CDABC', 'CDABCA', 'CDABCAB', 'CDABCABA', 'CDABCB', 'CDABCBA', 'CDAC', 'CDACA', 'CDACAB', 'CDACABA', 'CDACB', 'CDACBA', 'CDB', 'CDBA', 'CDBAC', 'CDBACA', 'CDBACAB', 'CDBACABA', 'CDBACB', 'CDBACBA', 'CDBC', 'CDBCA', 'CDBCAB', 'CDBCABA', 'CDBCB', 'CDBCBA', 'CDC', 'CDCA', 'CDCAB', 'CDCABA', 'CDCB', 'CDCBA', 'D', 'DA', 'DAB', 'DABA', 'DABAC', 'DABACA', 'DABACAB', 'DABACB', 'DABACBA', 'DABC', 'DABCA', 'DABCAB', 'DABCABA', 'DABCB', 'DABCBA', 'DAC', 'DACA', 'DACAB', 'DACABA', 'DACB', 'DACBA', 'DB', 'DBA', 'DBAC', 'DBACA', 'DBACAB', 'DBACABA', 'DBACB', 'DBACBA', 'DBC', 'DBCA', 'DBCAB', 'DBCABA', 'DBCB', 'DBCBA', 'DC', 'DCA', 'DCAB', 'DCABA', 'DCB', 'DCBA'];

let valid3 = {'ABA': 'Generation A: #DACBA/ADABCBA', 'ABACA': 'Generation ABA: #ABACB/DABCAB', 'ABACABA': 'Generation C: #D/DBACB', 'ABADA': 'Generation C: #ABCA/DBACB', 'ABADAB': 'Generation BA: #DBACB/ADBACABA', 'ABADABA': 'Generation C: #DCA/DBACB', 'ABADABAC': 'Generation AB: #ABCABA/ADBACA', 'ABADABACA': 'Generation A: #ADCBA/ADABCBA', 'ABADABACAB': 'Generation A: #ADCA/ADABCBA', 'ABADABACABA': 'Generation AB: #DABCA/ADBACA', 'ABADABC': 'Generation AB: #DC/ADBACA', 'ABADABCA': 'Generation BA: #ADBACA/ADBACABA', 'ABADABCABA': 'Generation BA: #BC/ADBACABA', 'ABADABCB': 'Generation AB: #CB/ADBACA', 'ABADACA': 'Generation AB: #DBACABA/ADBACA', 'ABADACABA': 'Generation ABA: #ABCAB/DABCAB', 'ABADACBA': 'Generation C: #BACA/DBACB', 'ABADB': 'Generation BA: #BCA/ADBACABA', 'ABADBA': 'Generation B: #ABCAB/DABACA', 'ABADBACAB': 'Generation B: #DABCAB/DABACA', 'ABADBACABA': 'Generation A: #DBCA/ADABCBA', 'ABADBC': 'Generation B: #DBAC/DABACA', 'ABADBCA': 'Generation A: #DABACA/ADABCBA', 'ABADBCAB': 'Generation C: #DBCBA/DBACB', 'ABADBCABA': 'Generation C: #BCA/DBACB', 'ABADC': 'Generation BA: #DACAB/ADBACABA', 'ABADCA': 'Generation BA: #ABCA/ADBACABA', 'ABADCAB': 'Generation C: #ACB/DBACB', 'ABADCB': 'Generation AB: #ADBCA/ADBACA', 'ABC': 'Generation A: #DABACABA/ADABCBA', 'ABCAB': 'Generation A: #BACA/ADABCBA', 'ABCABA': 'Generation ABA: #DABC/DABCAB', 'ABCBA': 'Generation A: #AD/ADABCBA', 'ABDA': 'Generation AB: #ADCAB/ADBACA', 'ABDABAC': 'Generation AB: #DCB/ADBACA', 'ABDABACA': 'Generation BA: #DABACA/ADBACABA', 'ABDABACABA': 'Generation A: #B/ADABCBA', 'ABDABACB': 'Generation C: #CBA/DBACB', 'ABDABACBA': 'Generation BA: #DCA/ADBACABA', 'ABDABC': 'Generation ABA: #DACAB/DABCAB', 'ABDABCA': 'Generation B: #DCAB/DABACA', 'ABDABCAB': 'Generation B: #DAC/DABACA', 'ABDABCBA': 'Generation BA: #ADAB/ADBACABA', 'ABDAC': 'Generation B: #BCB/DABACA', 'ABDACAB': 'Generation B: #DACAB/DABACA', 'ABDB': 'Generation C: #DACBA/DBACB', 'ABDBA': 'Generation BA: #ADBACB/ADBACABA', 'ABDBACA': 'Generation A: #ADBCABA/ADABCBA', 'ABDBACABA': 'Generation A: #A/ADABCBA', 'ABDBACB': 'Generation C: #CABA/DBACB', 'ABDBCAB': 'Generation A: #ABCABA/ADABCBA', 'ABDBCB': 'Generation A: #DABCBA/ADABCBA', 'ABDCA': 'Generation BA: #ABCAB/ADBACABA', 'ABDCAB': 'Generation AB: #ADBCBA/ADBACA', 'ABDCABA': 'Generation ABA: #ABA/DABCAB', 'ABDCB': 'Generation BA: #ADBACAB/ADBACABA', 'ABDCBA': 'Generation A: #DBACA/ADABCBA', 'ACAB': 'Generation ABA: #DBCABA/DABCAB', 'ACABADA': 'Generation BA: #ACABA/ADBACABA', 'ACABADAB': 'Generation AB: #DABCBA/ADBACA', 'ACABADABAC': 'Generation BA: #DCB/ADBACABA', 'ACABADABCAB': 'Generation B: #AB/DABACA', 'ACABADABCB': 'Generation AB: #ACB/ADBACA', 'ACABADABCBA': 'Generation B: #BA/DABACA', 'ACABADAC': 'Generation B: #ABA/DABACA', 'ACABADACA': 'Generation C: #B/DBACB', 'ACABADBAC': 'Generation A: #DCABA/ADABCBA', 'ACABADBACA': 'Generation A: #ADABCB/ADABCBA', 'ACABADBC': 'Generation A: #ADA/ADABCBA', 'ACABADBCA': 'Generation A: #ACBA/ADABCBA', 'ACABADBCABA': 'Generation ABA: #ABACA/DABCAB', 'ACABADCABA': 'Generation AB: #DBAC/ADBACA', 'ACABADCB': 'Generation ABA: #DBCBA/DABCAB', 'ACABD': 'Generation B: #DBACAB/DABACA', 'ACABDA': 'Generation AB: #ABACAB/ADBACA', 'ACABDAB': 'Generation C: #DAB/DBACB', 'ACABDABA': 'Generation A: #CB/ADABCBA', 'ACABDABAC': 'Generation BA: #DBC/ADBACABA', 'ACABDABACA': 'Generation AB: #DABCABA/ADBACA', 'ACABDABACAB': 'Generation BA: #DAC/ADBACABA', 'ACABDABACB': 'Generation BA: #ADC/ADBACABA', 'ACABDABACBA': 'Generation B: #DBCB/DABACA', 'ACABDABCA': 'Generation ABA: #DCAB/DABCAB', 'ACABDABCABA': 'Generation C: #BACBA/DBACB', 'ACABDABCBA': 'Generation A: #DBAC/ADABCBA', 'ACABDB': 'Generation ABA: #ACAB/DABCAB', 'ACABDBA': 'Generation ABA: #DB/DABCAB', 'ACABDBACAB': 'Generation C: #BAC/DBACB', 'ACABDBACB': 'Generation A: #DAB/ADABCBA', 'ACABDBC': 'Generation AB: #ACBA/ADBACA', 'ACABDBCABA': 'Generation BA: #ADACBA/ADBACABA', 'ACABDCAB': 'Generation C: #BACB/DBACB', 'ACABDCB': 'Generation AB: #ADCABA/ADBACA', 'ACABDCBA': 'Generation ABA: #ABCB/DABCAB', 'ACADA': 'Generation AB: #DACAB/ADBACA', 'ACADABAC': 'Generation AB: #ADABA/ADBACA', 'ACADABACA': 'Generation A: #ADABC/ADABCBA', 'ACADABACAB': 'Generation C: #ABC/DBACB', 'ACADABC': 'Generation AB: #BACBA/ADBACA', 'ACADABCABA': 'Generation BA: #DABC/ADBACABA', 'ACADABCB': 'Generation B: #B/DABACA', 'ACADAC': 'Generation A: #CAB/ADABCBA', 'ACADACABA': 'Generation ABA: #DACB/DABCAB', 'ACADACB': 'Generation C: #C/DBACB', 'ACADBAC': 'Generation ABA: #BCBA/DABCAB', 'ACADBACAB': 'Generation BA: #ACAB/ADBACABA', 'ACADBACB': 'Generation BA: #AB/ADBACABA', 'ACADBCA': 'Generation ABA: #CB/DABCAB', 'ACADBCAB': 'Generation ABA: #BC/DABCAB', 'ACADBCABA': 'Generation ABA: #BACB/DABCAB', 'ACADBCB': 'Generation B: #DABCB/DABACA', 'ACADBCBA': 'Generation BA: #DBCABA/ADBACABA', 'ACADCA': 'Generation B: #DBCAB/DABACA', 'ACADCABA': 'Generation A: #CABA/ADABCBA', 'ACADCB': 'Generation AB: #ABACB/ADBACA', 'ACBADABAC': 'Generation AB: #BCABA/ADBACA', 'ACBADABACAB': 'Generation BA: #BA/ADBACABA', 'ACBADABACBA': 'Generation BA: #DBACABA/ADBACABA', 'ACBADABCA': 'Generation A: #DABA/ADABCBA', 'ACBADABCABA': 'Generation A: #ABA/ADABCBA', 'ACBADAC': 'Generation ABA: #ABACBA/DABCAB', 'ACBADACAB': 'Generation A: #CA/ADABCBA', 'ACBADACB': 'Generation ABA: #DBC/DABCAB', 'ACBADB': 'Generation A: #BACAB/ADABCBA', 'ACBADBA': 'Generation A: #ADBA/ADABCBA', 'ACBADBAC': 'Generation C: #CAB/DBACB', 'ACBADBACA': 'Generation C: #AC/DBACB', 'ACBADBACAB': 'Generation ABA: #DABCBA/DABCAB', 'ACBADBACABA': 'Generation AB: #DABAC/ADBACA', 'ACBADBACB': 'Generation BA: #DBCBA/ADBACABA', 'ACBADBC': 'Generation A: #ADBCBA/ADABCBA', 'ACBADBCA': 'Generation A: #DCA/ADABCBA', 'ACBADBCAB': 'Generation B: #DABCBA/DABACA', 'ACBADBCABA': 'Generation B: #CA/DABACA', 'ACBADBCB': 'Generation BA: #DACA/ADBACABA', 'ACBADBCBA': 'Generation C: #DBAC/DBACB', 'ACBADC': 'Generation AB: #ADA/ADBACA', 'ACBADCA': 'Generation A: #ACB/ADABCBA', 'ACBADCB': 'Generation BA: #DBACBA/ADBACABA', 'ACBDA': 'Generation B: #ABACB/DABACA', 'ACBDAB': 'Generation C: #DBA/DBACB', 'ACBDABA': 'Generation ABA: #DC/DABCAB', 'ACBDABACA': 'Generation B: #D/DABACA', 'ACBDABACABA': 'Generation B: #BCABA/DABACA', 'ACBDABCA': 'Generation B: #DAB/DABACA', 'ACBDABCABA': 'Generation ABA: #B/DABCAB', 'ACBDABCB': 'Generation B: #DABA/DABACA', 'ACBDABCBA': 'Generation B: #BACABA/DABACA', 'ACBDACA': 'Generation B: #ACA/DABACA', 'ACBDACAB': 'Generation ABA: #DCBA/DABCAB', 'ACBDACABA': 'Generation A: #BCA/ADABCBA', 'ACBDACB': 'Generation C: #ABACBA/DBACB', 'ACBDACBA': 'Generation BA: #ADBCBA/ADBACABA', 'ACBDB': 'Generation BA: #DA/ADBACABA', 'ACBDBA': 'Generation A: #BACB/ADABCBA', 'ACBDBAC': 'Generation ABA: #BACA/DABCAB', 'ACBDBACA': 'Generation ABA: #BAC/DABCAB', 'ACBDBACB': 'Generation A: #DAC/ADABCBA', 'ACBDBCA': 'Generation BA: #BACBA/ADBACABA', 'ACBDBCAB': 'Generation AB: #ABA/ADBACA', 'ACBDBCB': 'Generation A: #ADBACABA/ADABCBA', 'ACBDC': 'Generation AB: #DCBA/ADBACA', 'ACBDCA': 'Generation AB: #BACABA/ADBACA', 'ACBDCAB': 'Generation C: #DBCAB/DBACB', 'ACBDCABA': 'Generation AB: #ACABA/ADBACA', 'ACDAB': 'Generation AB: #BA/ADBACA', 'ACDABA': 'Generation A: #ADC/ADABCBA', 'ACDABACAB': 'Generation AB: #ADBCABA/ADBACA', 'ACDABACABA': 'Generation A: #BCAB/ADABCBA', 'ACDABCB': 'Generation BA: #ABACABA/ADBACABA', 'ACDAC': 'Generation BA: #ADCA/ADBACABA', 'ACDACAB': 'Generation ABA: #DA/DABCAB', 'ACDACABA': 'Generation BA: #ADBCA/ADBACABA', 'ACDACB': 'Generation C: #BCB/DBACB', 'ACDBAC': 'Generation C: #DB/DBACB', 'ACDBCB': 'Generation A: #ABACBA/ADABCBA', 'ACDBCBA': 'Generation B: #BC/DABACA', 'ACDCAB': 'Generation AB: #BACB/ADBACA', 'ACDCB': 'Generation BA: #ADCABA/ADBACABA', 'ACDCBA': 'Generation BA: #B/ADBACABA', 'AD': 'Generation BA: #DBACAB/ADBACABA', 'ADA': 'Generation A: #DABCABA/ADABCBA', 'ADABA': 'Generation BA: #DACBA/ADBACABA', 'ADABAC': 'Generation C: #ACABA/DBACB', 'ADABACA': 'Generation BA: #ACBA/ADBACABA', 'ADABACAB': 'Generation ABA: #DCA/DABCAB', 'ADABACBA': 'Generation ABA: #DABCAB/DABCAB', 'ADABC': 'Generation B: #BACAB/DABACA', 'ADABCA': 'Generation A: #ADABCBA/ADABCBA', 'ADABCABA': 'Generation A: #ADCB/ADABCBA', 'ADABCB': 'Generation B: #BCAB/DABACA', 'ADABCBA': 'Generation A: #ADBCA/ADABCBA', 'ADACA': 'Generation ABA: #DABA/DABCAB', 'ADACAB': 'Generation AB: #ABCB/ADBACA', 'ADACABA': 'Generation B: #DBA/DABACA', 'ADACBA': 'Generation A: #DABCAB/ADABCBA', 'ADBA': 'Generation AB: #DABCAB/ADBACA', 'ADBAC': 'Generation AB: #BCA/ADBACA', 'ADBACAB': 'Generation ABA: #DBACB/DABCAB', 'ADBACABA': 'Generation C: #BA/DBACB', 'ADBACBA': 'Generation ABA: #DBACBA/DABCAB', 'ADBCB': 'Generation BA: #ABAC/ADBACABA', 'ADBCBA': 'Generation AB: #ADACAB/ADBACA', 'ADCA': 'Generation ABA: #DBCAB/DABCAB', 'ADCAB': 'Generation A: #DABC/ADABCBA', 'ADCABA': 'Generation ABA: #BCAB/DABCAB', 'ADCB': 'Generation C: #BCBA/DBACB', 'ADCBA': 'Generation BA: #DAB/ADBACABA', 'B': 'Generation C: #BACABA/DBACB', 'BAC': 'Generation A: #ABACABA/ADABCBA', 'BACA': 'Generation BA: #DABACBA/ADBACABA', 'BACB': 'Generation BA: #ADB/ADBACABA', 'BAD': 'Generation B: #ACABA/DABACA', 'BADA': 'Generation B: #DABACA/DABACA', 'BADAB': 'Generation BA: #DABACB/ADBACABA', 'BADABAC': 'Generation A: #ABCA/ADABCBA', 'BADABACB': 'Generation BA: #ABACAB/ADBACABA', 'BADABACBA': 'Generation A: #DBCABA/ADABCBA', 'BADABCA': 'Generation AB: #ADBACA/ADBACA', 'BADABCB': 'Generation AB: #DACABA/ADBACA', 'BADABCBA': 'Generation ABA: #AC/DABCAB', 'BADACA': 'Generation B: #BACBA/DABACA', 'BADB': 'Generation BA: #DABAC/ADBACABA', 'BADBA': 'Generation AB: #BCBA/ADBACA', 'BADBAC': 'Generation BA: #ADBAC/ADBACABA', 'BADBACA': 'Generation ABA: #ABACAB/DABCAB', 'BADBACAB': 'Generation A: #ADBACAB/ADABCBA', 'BADBACABA': 'Generation BA: #ABCBA/ADBACABA', 'BADBACBA': 'Generation BA: #ADA/ADBACABA', 'BADBC': 'Generation B: #DABC/DABACA', 'BADBCAB': 'Generation A: #ABCB/ADABCBA', 'BADBCABA': 'Generation BA: #ADBCABA/ADBACABA', 'BADCA': 'Generation B: #ABCA/DABACA', 'BADCAB': 'Generation ABA: #ACABA/DABCAB', 'BADCBA': 'Generation AB: #BCB/ADBACA', 'BC': 'Generation B: #DABCA/DABACA', 'BCAB': 'Generation AB: #ADACB/ADBACA', 'BCABA': 'error', 'BCABAD': 'Generation A: #DBACBA/ADABCBA', 'BCABDA': 'Generation C: #DBACA/DBACB', 'BCABDABA': 'Generation AB: #DABA/ADBACA', 'BCABDABACAB': 'Generation AB: #DCA/ADBACA', 'BCABDABACABA': 'Generation A: #DABAC/ADABCBA', 'BCABDABCA': 'Generation ABA: #ABCA/DABCAB', 'BCABDABCB': 'Generation ABA: #BCA/DABCAB', 'BCABDACABA': 'Generation B: #DACBA/DABACA', 'BCABDACB': 'Generation B: #C/DABACA', 'BCABDB': 'Generation ABA: #CAB/DABCAB', 'BCABDBAC': 'Generation BA: #CB/ADBACABA', 'BCABDBACA': 'Generation BA: #ADACABA/ADBACABA', 'BCABDBACABA': 'Generation BA: #CBA/ADBACABA', 'BCABDBCA': 'Generation BA: #BCB/ADBACABA', 'BCABDBCAB': 'Generation ABA: #CABA/DABCAB', 'BCABDC': 'Generation BA: #DABCBA/ADBACABA', 'BCABDCA': 'Generation A: #BAC/ADABCBA', 'BCABDCAB': 'Generation C: #DBCABA/DBACB', 'BCADAB': 'Generation A: #ADACBA/ADABCBA', 'BCADABACA': 'Generation A: #DABACB/ADABCBA', 'BCADABACAB': 'Generation C: #DAC/DBACB', 'BCADABACABA': 'Generation C: #DBC/DBACB', 'BCADABACB': 'Generation BA: #ABACB/ADBACABA', 'BCADABC': 'Generation B: #A/DABACA', 'BCADABCA': 'Generation BA: #DABACABA/ADBACABA', 'BCADABCABA': 'Generation AB: #CA/ADBACA', 'BCADABCB': 'Generation A: #ADACB/ADABCBA', 'BCADABCBA': 'Generation BA: #ABC/ADBACABA', 'BCADBA': 'Generation A: #ADBACA/ADABCBA', 'BCADBAC': 'Generation BA: #ABACA/ADBACABA', 'BCADBACAB': 'Generation ABA: #DABCA/DABCAB', 'BCADBACABA': 'Generation A: #DBCBA/ADABCBA', 'BCADCABA': 'Generation B: #DACA/DABACA', 'BCADCB': 'Generation ABA: #BACABA/DABCAB', 'BCBA': 'Generation ABA: #BA/DABCAB', 'BCBAD': 'Generation AB: #ACA/ADBACA', 'BCBADA': 'Generation BA: #DBCA/ADBACABA', 'BCBADAB': 'Generation AB: #DACA/ADBACA', 'BCBADABACA': 'Generation AB: #DABC/ADBACA', 'BCBADABACAB': 'Generation A: #BACABA/ADABCBA', 'BCBADABACBA': 'Generation C: #DCB/DBACB', 'BCBADABC': 'Generation B: #AC/DABACA', 'BCBADABCB': 'Generation BA: #BCABA/ADBACABA', 'BCBADACA': 'Generation BA: #ADAC/ADBACABA', 'BCBADACB': 'Generation AB: #AC/ADBACA', 'BCBADB': 'Generation BA: #DABCAB/ADBACABA', 'BCBADBA': 'Generation AB: #C/ADBACA', 'BCBADBACA': 'Generation AB: #BC/ADBACA', 'BCBADBACB': 'Generation AB: #DABACB/ADBACA', 'BCBADBACBA': 'Generation B: #CABA/DABACA', 'BCBADBCAB': 'Generation A: #DA/ADABCBA', 'BCBADBCABA': 'Generation BA: #BACABA/ADBACABA', 'BCBADC': 'Generation AB: #D/ADBACA', 'BCBADCAB': 'Generation A: #DACA/ADABCBA', 'BCBADCABA': 'Generation BA: #CA/ADBACABA', 'BCBADCB': 'Generation A: #C/ADABCBA', 'BCBADCBA': 'Generation BA: #BACB/ADBACABA', 'BCBD': 'Generation AB: #DBA/ADBACA', 'BCBDA': 'Generation AB: #DBCB/ADBACA', 'BCBDAB': 'Generation A: #DCBA/ADABCBA', 'BCBDABA': 'Generation BA: #ADCAB/ADBACABA', 'BCBDABACA': 'Generation ABA: #DACABA/DABCAB', 'BCBDABACAB': 'Generation AB: #ADAB/ADBACA', 'BCBDABACABA': 'Generation AB: #ADC/ADBACA', 'BCBDABACB': 'Generation ABA: #BCABA/DABCAB', 'BCBDABACBA': 'Generation AB: #ADBA/ADBACA', 'BCBDABC': 'Generation C: #ABACA/DBACB', 'BCBDABCBA': 'Generation A: #ACABA/ADABCBA', 'BCBDAC': 'Generation A: #ABACB/ADABCBA', 'BCBDACAB': 'Generation ABA: #DACA/DABCAB', 'BCBDBACA': 'Generation BA: #ACA/ADBACABA', 'BCBDBACABA': 'Generation A: #ADBCAB/ADABCBA', 'BCBDBACB': 'Generation AB: #DABACABA/ADBACA', 'BCBDBC': 'Generation AB: #ABACBA/ADBACA', 'BCBDBCAB': 'Generation ABA: #ACBA/DABCAB', 'BCBDBCABA': 'Generation BA: #ADBCB/ADBACABA', 'BCBDBCB': 'Generation AB: #AB/ADBACA', 'BCBDC': 'Generation C: #ABACB/DBACB', 'BCBDCABA': 'Generation C: #DA/DBACB', 'BCD': 'Generation BA: #CABA/ADBACABA', 'BCDAB': 'Generation ABA: #C/DABCAB', 'BCDABAC': 'Generation AB: #ADACA/ADBACA', 'BCDABACA': 'Generation ABA: #D/DABCAB', 'BCDABACAB': 'Generation A: #DC/ADABCBA', 'BCDABACB': 'Generation AB: #BCAB/ADBACA', 'BCDABC': 'Generation AB: #DBC/ADBACA', 'BCDABCABA': 'Generation AB: #DABACA/ADBACA', 'BCDACA': 'Generation C: #ABCAB/DBACB', 'BCDACABA': 'Generation A: #DABCB/ADABCBA', 'BCDB': 'Generation C: #DACB/DBACB', 'BCDBA': 'Generation A: #DBACB/ADABCBA', 'BCDBAC': 'Generation AB: #DCABA/ADBACA', 'BCDBACA': 'Generation AB: #DCAB/ADBACA', 'BCDBACABA': 'Generation B: #DCABA/DABACA', 'BCDBACB': 'Generation BA: #AD/ADBACABA', 'BCDBCB': 'Generation B: #DACB/DABACA', 'BCDBCBA': 'Generation AB: #ADBAC/ADBACA', 'BCDCAB': 'Generation B: #DCBA/DABACA', 'BCDCB': 'Generation A: #ABCBA/ADABCBA', 'BDA': 'Generation B: #CAB/DABACA', 'BDAB': 'Generation ABA: #DAB/DABCAB', 'BDABA': 'Generation B: #BACB/DABACA', 'BDABACAB': 'Generation A: #CBA/ADABCBA', 'BDABACABA': 'Generation A: #ADBACB/ADABCBA', 'BDABACB': 'Generation ABA: #CBA/DABCAB', 'BDABACBA': 'Generation ABA: #DCABA/DABCAB', 'BDABC': 'Generation AB: #DBCABA/ADBACA', 'BDABCA': 'Generation C: #CB/DBACB', 'BDABCAB': 'Generation BA: #ABA/ADBACABA', 'BDAC': 'Generation ABA: #DBCB/DABCAB', 'BDACA': 'Generation BA: #BACAB/ADBACABA', 'BDACAB': 'Generation C: #ACAB/DBACB', 'BDACABA': 'Generation ABA: #BACAB/DABCAB', 'BDACB': 'Generation BA: #DABA/ADBACABA', 'BDACBA': 'Generation BA: #DC/ADBACABA', 'BDB': 'Generation AB: #CABA/ADBACA', 'BDBA': 'Generation A: #DBACAB/ADABCBA', 'BDBACA': 'Generation AB: #DABACAB/ADBACA', 'BDBACAB': 'Generation BA: #DBAC/ADBACABA', 'BDBACABA': 'Generation ABA: #DBA/DABCAB', 'BDBACB': 'Generation BA: #AC/ADBACABA', 'BDBC': 'Generation AB: #BAC/ADBACA', 'BDBCA': 'Generation C: #ABACAB/DBACB', 'BDBCABA': 'Generation BA: #A/ADBACABA', 'BDBCB': 'Generation B: #DBACB/DABACA', 'BDBCBA': 'error', 'BDCAB': 'Generation A: #DBCAB/ADABCBA', 'BDCABA': 'Generation ABA: #DABCB/DABCAB', 'BDCB': 'Generation AB: #ABC/ADBACA', 'BDCBA': 'Generation B: #DBCABA/DABACA', 'C': 'Generation C: #DACA/DBACB', 'CA': 'error', 'CAB': 'Generation B: #ABAC/DABACA', 'CABA': 'Generation B: #DCB/DABACA', 'CABADA': 'Generation AB: #DBACAB/ADBACA', 'CABADAB': 'Generation AB: #BACAB/ADBACA', 'CABADABCA': 'Generation C: #CA/DBACB', 'CABADABCAB': 'Generation B: #ABCBA/DABACA', 'CABADABCABA': 'Generation AB: #ADBCAB/ADBACA', 'CABADAC': 'Generation BA: #ADBACABA/ADBACABA', 'CABADACABA': 'Generation C: #DBCA/DBACB', 'CABADACB': 'Generation BA: #DACABA/ADBACABA', 'CABADACBA': 'Generation AB: #ABACABA/ADBACA', 'CABADBACA': 'Generation BA: #ADCBA/ADBACABA', 'CABADBACBA': 'Generation BA: #ABCABA/ADBACABA', 'CABADBC': 'Generation C: #DACAB/DBACB', 'CABADBCA': 'Generation C: #ABACABA/DBACB', 'CABADBCAB': 'Generation B: #DC/DABACA', 'CABADC': 'Generation A: #ADAB/ADABCBA', 'CABADCA': 'Generation B: #CB/DABACA', 'CABADCBA': 'Generation B: #CBA/DABACA', 'CABD': 'Generation C: #DCBA/DBACB', 'CABDAB': 'Generation AB: #DBCA/ADBACA', 'CABDABAC': 'Generation B: #ABC/DABACA', 'CABDABACA': 'Generation B: #DBACABA/DABACA', 'CABDABACB': 'Generation A: #DABACAB/ADABCBA', 'CABDABC': 'error', 'CABDABCA': 'Generation BA: #ADABA/ADBACABA', 'CABDABCAB': 'Generation AB: #DACBA/ADBACA', 'CABDABCB': 'Generation AB: #ABCA/ADBACA', 'CABDABCBA': 'Generation C: #ABCB/DBACB', 'CABDACABA': 'Generation B: #DABAC/DABACA', 'CABDACBA': 'Generation BA: #ABACBA/ADBACABA', 'CABDBA': 'Generation ABA: #CA/DABCAB', 'CABDBACA': 'Generation BA: #CAB/ADBACABA', 'CABDBACAB': 'Generation ABA: #DBACA/DABCAB', 'CABDBACBA': 'Generation A: #ABC/ADABCBA', 'CABDBC': 'Generation ABA: #ABCBA/DABCAB', 'CABDBCA': 'Generation BA: #BACA/ADBACABA', 'CABDBCAB': 'Generation A: #BACBA/ADABCBA', 'CABDBCABA': 'Generation B: #ABACA/DABACA', 'CABDBCB': 'Generation C: #DABA/DBACB', 'CABDBCBA': 'Generation A: #BA/ADABCBA', 'CABDCA': 'Generation ABA: #ABACABA/DABCAB', 'CABDCAB': 'Generation A: #ADABCA/ADABCBA', 'CABDCB': 'Generation A: #ACAB/ADABCBA', 'CABDCBA': 'Generation A: #BC/ADABCBA', 'CAD': 'Generation AB: #DAC/ADBACA', 'CADA': 'Generation BA: #DCABA/ADBACABA', 'CADABA': 'Generation B: #BCBA/DABACA', 'CADABAC': 'Generation A: #ADAC/ADABCBA', 'CADABACA': 'Generation A: #ADCAB/ADABCBA', 'CADABACB': 'Generation BA: #DACB/ADBACABA', 'CADABACBA': 'Generation B: #DCA/DABACA', 'CADABC': 'Generation A: #ADABA/ADABCBA', 'CADABCA': 'Generation BA: #DBA/ADBACABA', 'CADABCAB': 'Generation AB: #DBCAB/ADBACA', 'CADABCABA': 'Generation A: #ACA/ADABCBA', 'CADABCBA': 'Generation B: #DABCABA/DABACA', 'CADAC': 'Generation A: #D/ADABCBA', 'CADACAB': 'Generation A: #BCB/ADABCBA', 'CADACB': 'Generation B: #DBACBA/DABACA', 'CADACBA': 'Generation BA: #BCAB/ADBACABA', 'CADB': 'Generation A: #ADBAC/ADABCBA', 'CADBA': 'Generation A: #DB/ADABCBA', 'CADBAC': 'Generation C: #ABCBA/DBACB', 'CADBACA': 'Generation AB: #B/ADBACA', 'CADBACAB': 'Generation A: #ADCABA/ADABCBA', 'CADBACABA': 'Generation AB: #DBACA/ADBACA', 'CADBACBA': 'Generation A: #ADACAB/ADABCBA', 'CADBCAB': 'Generation A: #BCABA/ADABCBA', 'CADBCABA': 'Generation A: #ADBACBA/ADABCBA', 'CADBCBA': 'Generation AB: #ACAB/ADBACA', 'CADC': 'Generation AB: #ADAC/ADBACA', 'CADCA': 'Generation C: #ACA/DBACB', 'CADCAB': 'Generation ABA: #DBACAB/DABCAB', 'CADCABA': 'Generation BA: #ACB/ADBACABA', 'CADCB': 'Generation ABA: #DAC/DABCAB', 'CBA': 'Generation BA: #BAC/ADBACABA', 'CBAD': 'Generation BA: #ADACAB/ADBACABA', 'CBADAB': 'Generation A: #ABCAB/ADABCBA', 'CBADABACA': 'Generation BA: #DCBA/ADBACABA', 'CBADABACAB': 'Generation ABA: #AB/DABCAB', 'CBADABACABA': 'Generation AB: #DABCB/ADBACA', 'CBADABACB': 'Generation C: #ACBA/DBACB', 'CBADABACBA': 'Generation AB: #DACB/ADBACA', 'CBADABCA': 'Generation AB: #A/ADBACA', 'CBADABCAB': 'Generation ABA: #ABC/DABCAB', 'CBADABCABA': 'Generation AB: #DB/ADBACA', 'CBADABCB': 'Generation A: #DCAB/ADABCBA', 'CBADABCBA': 'Generation BA: #ADCB/ADBACABA', 'CBADACAB': 'Generation C: #DCABA/DBACB', 'CBADACABA': 'Generation C: #DCAB/DBACB', 'CBADACB': 'Generation C: #BACAB/DBACB', 'CBADACBA': 'Generation BA: #ADBACBA/ADBACABA', 'CBADBAC': 'Generation B: #ABACBA/DABACA', 'CBADBACA': 'Generation A: #DACB/ADABCBA', 'CBADBACAB': 'Generation BA: #DCAB/ADBACABA', 'CBADBACB': 'Generation ABA: #ABAC/DABCAB', 'CBADBACBA': 'Generation BA: #ADBA/ADBACABA', 'CBADBC': 'Generation C: #AB/DBACB', 'CBADBCAB': 'Generation BA: #BCBA/ADBACABA', 'CBADBCABA': 'Generation A: #AB/ADABCBA', 'CBADC': 'Generation A: #DCB/ADABCBA', 'CBADCA': 'Generation C: #BCABA/DBACB', 'CBADCAB': 'Generation AB: #ADACABA/ADBACA', 'CBADCABA': 'Generation AB: #ADB/ADBACA', 'CBADCBA': 'Generation AB: #CBA/ADBACA', 'CBD': 'Generation A: #ABACA/ADABCBA', 'CBDAB': 'Generation ABA: #DCB/DABCAB', 'CBDABA': 'Generation BA: #ADACB/ADBACABA', 'CBDABAC': 'Generation B: #DBACA/DABACA', 'CBDABACAB': 'Generation C: #DBCB/DBACB', 'CBDABACABA': 'Generation C: #DACABA/DBACB', 'CBDABACB': 'Generation AB: #ABACA/ADBACA', 'CBDABACBA': 'Generation AB: #CAB/ADBACA', 'CBDABC': 'Generation B: #BCA/DABACA', 'CBDABCAB': 'Generation C: #BCAB/DBACB', 'CBDABCB': 'Generation A: #ADACA/ADABCBA', 'CBDAC': 'Generation A: #DBACABA/ADABCBA', 'CBDACA': 'Generation A: #DABACBA/ADABCBA', 'CBDACAB': 'Generation BA: #ADBCAB/ADBACABA', 'CBDACB': 'Generation A: #DABCA/ADABCBA', 'CBDB': 'Generation B: #ABACAB/DABACA', 'CBDBA': 'Generation B: #ABACABA/DABACA', 'CBDBAC': 'Generation AB: #BACA/ADBACA', 'CBDBACA': 'Generation ABA: #BACBA/DABCAB', 'CBDBACAB': 'Generation ABA: #ACA/DABCAB', 'CBDBACABA': 'Generation B: #ACBA/DABACA', 'CBDBACB': 'Generation ABA: #ABCABA/DABCAB', 'CBDBACBA': 'Generation C: #ABAC/DBACB', 'CBDBC': 'Generation C: #BC/DBACB', 'CBDBCA': 'Generation AB: #DBCBA/ADBACA', 'CBDBCAB': 'Generation A: #DACAB/ADABCBA', 'CBDC': 'Generation C: #DBACB/DBACB', 'CBDCA': 'Generation A: #DACABA/ADABCBA', 'CBDCAB': 'Generation BA: #C/ADBACABA', 'CBDCB': 'Generation C: #ABCABA/DBACB', 'CBDCBA': 'Generation ABA: #ACB/DABCAB', 'CD': 'Generation BA: #DABCABA/ADBACABA', 'CDA': 'Generation ABA: #BCB/DABCAB', 'CDABAC': 'Generation ABA: #DACBA/DABCAB', 'CDABACAB': 'Generation B: #DA/DABACA', 'CDABACBA': 'Generation AB: #ADBCB/ADBACA', 'CDABC': 'Generation B: #ABCABA/DABACA', 'CDABCA': 'Generation A: #ADBC/ADABCBA', 'CDABCAB': 'Generation B: #ABCB/DABACA', 'CDABCB': 'Generation BA: #ADACA/ADBACABA', 'CDABCBA': 'Generation A: #ADACABA/ADABCBA', 'CDACAB': 'Generation B: #DACABA/DABACA', 'CDACABA': 'Generation BA: #DABACAB/ADBACABA', 'CDACBA': 'Generation B: #DB/DABACA', 'CDB': 'Generation BA: #DBCB/ADBACABA', 'CDBA': 'Generation ABA: #DBACABA/DABCAB', 'CDBAC': 'Generation AB: #DA/ADBACA', 'CDBACA': 'Generation A: #ADBCB/ADABCBA', 'CDBACAB': 'Generation BA: #DBCAB/ADBACABA', 'CDBACABA': 'Generation BA: #ADBC/ADBACABA', 'CDBACB': 'Generation AB: #DBACB/ADBACA', 'CDBACBA': 'Generation AB: #DBACBA/ADBACA', 'CDBC': 'Generation BA: #DBACA/ADBACABA', 'CDBCA': 'Generation AB: #ABCBA/ADBACA', 'CDBCAB': 'Generation BA: #DB/ADBACABA', 'CDBCABA': 'Generation AB: #ADBC/ADBACA', 'CDBCBA': 'Generation B: #ACB/DABACA', 'CDCAB': 'Generation A: #ABACAB/ADABCBA', 'CDCABA': 'Generation A: #DBCB/ADABCBA', 'CDCB': 'Generation C: #A/DBACB', 'CDCBA': 'Generation AB: #DABACBA/ADBACA', 'D': 'Generation B: #DBCBA/DABACA', 'DAB': 'Generation B: #BAC/DABACA', 'DABA': 'Generation BA: #ABCB/ADBACABA', 'DABAC': 'Generation B: #ACAB/DABACA', 'DABACA': 'error', 'DABACAB': 'Generation B: #DBC/DABACA', 'DABACB': 'Generation ABA: #A/DABCAB', 'DABACBA': 'Generation B: #DBCA/DABACA', 'DABCAB': 'Generation A: #AC/ADABCBA', 'DABCABA': 'Generation ABA: #DBAC/DABCAB', 'DABCB': 'Generation BA: #DABCB/ADBACABA', 'DABCBA': 'Generation AB: #DAB/ADBACA', 'DAC': 'Generation C: #ABA/DBACB', 'DACA': 'Generation BA: #DABCA/ADBACABA', 'DACAB': 'Generation AB: #ADACBA/ADBACA', 'DACB': 'Generation ABA: #DBCA/DABCAB', 'DACBA': 'Generation A: #ADB/ADABCBA', 'DBA': 'Generation AB: #ABAC/ADBACA', 'DBAC': 'Generation A: #ABAC/ADABCBA', 'DBACA': 'Generation A: #BCBA/ADABCBA', 'DBC': 'Generation AB: #ADCA/ADBACA', 'DBCA': 'Generation AB: #ADCB/ADBACA', 'DBCAB': 'Generation A: #DBC/ADABCBA', 'DBCABA': 'Generation C: #DC/DBACB', 'DBCB': 'Generation AB: #ADCBA/ADBACA', 'DBCBA': 'Generation A: #DBA/ADABCBA', 'DC': 'Generation AB: #ABCAB/ADBACA', 'DCAB': 'Generation AB: #AD/ADBACA', 'DCABA': 'Generation B: #BACA/DABACA', 'DCBA': 'Generation BA: #D/ADBACABA'};

let special = {'BCABA': ['██A█CABA', '█AB█ABA████', ''], 'BDBCBA': ['B██ABA█BA█', '███C███', '❌👁️'], 'CA': ['███CB█CA██', '██████A██████████', ''], 'DABACA': ['██AB██CBA██', '█ ████ █BA███ ██ █ █████ ██████', ''], 'CABDABC': ['██C███CAB', '██B█', '🚩🚩']};

let table1 = [30, 32, 90, 170, 4, 15, 112, 123, 182, 70, 90, 94, 144, 170, 178, 5, 112, 150, 59, 106, 123, 144, 182, 206, 78, 127, 160, 74, 120, 154, 0, 32, 0, 30, 132, 162, 170, 37, 102, 112, 150, 182, 195, 206, 49, 53, 63, 94, 202, 44, 63, 83, 139, 44, 86, 94, 106, 164, 202, 18, 94, 106, 144, 44, 49, 94, 139, 170, 190, 197, 9, 90, 178, 117, 27, 154, 190, 197, 24, 117, 127, 160, 187, 49, 139, 202, 53, 136, 164, 202, 0, 9, 70, 170, 9, 44, 53, 59, 63, 106, 144, 170, 38, 136, 164, 206, 18, 53, 59, 94, 164, 206, 5, 15, 38, 150, 182, 73, 78, 187, 27, 127, 154, 5, 18, 144, 178, 24, 78, 120, 154, 187, 32, 162, 170, 190, 86, 102, 164, 49, 63, 83, 154, 197, 9, 18, 59, 94, 123, 178, 15, 38, 112, 195, 27, 74, 120, 127, 139, 197, 24, 78, 32, 132, 53, 86, 102, 106, 136, 206, 0, 9, 32, 63, 90, 94, 132, 190, 9, 70, 123, 144, 5, 18, 38, 112, 206, 78, 117, 127, 63, 74, 132, 170, 197, 38, 150, 63, 74, 139, 154, 190, 44, 53, 83, 86, 18, 38, 102, 106, 164, 182];

let table2 = [1, 3, 0, 2, 4, 7, 5, 8, 6, 10, 13, 12, 14, 11, 9, 16, 17, 15, 19, 23, 21, 18, 20, 22, 25, 26, 24, 28, 29, 27, 31, 30, 33, 35, 36, 34, 32, 37, 42, 41, 39, 43, 40, 38, 48, 47, 44, 46, 45, 50, 52, 49, 51, 58, 57, 53, 55, 56, 54, 62, 61, 59, 60, 65, 63, 67, 64, 68, 69, 66, 72, 70, 71, 73, 75, 77, 74, 76, 81, 82, 78, 79, 80, 84, 85, 83, 89, 88, 86, 87, 93, 92, 90, 91, 101, 96, 99, 100, 95, 97, 94, 98, 105, 102, 103, 104, 108, 110, 109, 107, 111, 106, 116, 112, 115, 113, 114, 119, 117, 118, 121, 122, 120, 126, 123, 124, 125, 128, 131, 127, 129, 130, 133, 135, 132, 134, 137, 138, 136, 140, 143, 139, 141, 142, 147, 148, 145, 146, 149, 144, 152, 153, 151, 150, 156, 154, 157, 158, 159, 155, 161, 160, 163, 162, 165, 168, 169, 164, 166, 167, 172, 174, 176, 175, 170, 171, 177, 173, 181, 178, 179, 180, 183, 186, 185, 182, 184, 188, 189, 187, 193, 194, 191, 192, 190, 196, 195, 201, 200, 197, 199, 198, 204, 202, 205, 203, 209, 211, 207, 210, 208, 206];

let table3 = [2, 0, 3, 1, 4, 6, 8, 5, 7, 14, 9, 13, 11, 10, 12, 17, 15, 16, 21, 18, 22, 20, 23, 19, 26, 24, 25, 29, 27, 28, 31, 30, 36, 32, 35, 33, 34, 37, 43, 40, 42, 39, 38, 41, 46, 48, 47, 45, 44, 51, 49, 52, 50, 55, 58, 56, 57, 54, 53, 61, 62, 60, 59, 64, 66, 63, 69, 65, 67, 68, 71, 72, 70, 73, 76, 74, 77, 75, 80, 81, 82, 78, 79, 85, 83, 84, 88, 89, 87, 86, 92, 93, 91, 90, 100, 98, 95, 99, 101, 96, 97, 94, 103, 104, 105, 102, 111, 109, 106, 108, 107, 110, 113, 115, 116, 114, 112, 118, 119, 117, 122, 120, 121, 124, 125, 126, 123, 129, 127, 130, 131, 128, 134, 132, 135, 133, 138, 136, 137, 141, 139, 142, 143, 140, 149, 146, 147, 144, 145, 148, 153, 152, 150, 151, 155, 159, 154, 156, 157, 158, 161, 160, 163, 162, 167, 164, 168, 169, 165, 166, 174, 175, 170, 177, 171, 173, 172, 176, 179, 180, 181, 178, 185, 182, 186, 184, 183, 189, 187, 188, 194, 192, 193, 190, 191, 196, 195, 199, 201, 200, 198, 197, 203, 205, 202, 204, 211, 208, 210, 206, 209, 207];

let table4 = [37, 37, 37, 37, 123, 102, 102, 102, 102, 154, 154, 154, 154, 154, 154, 63, 63, 63, 132, 132, 132, 132, 132, 132, 70, 70, 70, 127, 127, 127, 178, 178, 74, 74, 74, 74, 74, 0, 44, 44, 44, 44, 44, 44, 38, 38, 38, 38, 38, 162, 162, 162, 162, 182, 182, 182, 182, 182, 182, 120, 120, 120, 120, 15, 15, 15, 15, 15, 15, 15, 24, 24, 24, 144, 32, 32, 32, 32, 160, 160, 160, 160, 160, 187, 187, 187, 197, 197, 197, 197, 112, 112, 112, 112, 117, 117, 117, 117, 117, 117, 117, 117, 5, 5, 5, 5, 150, 150, 150, 150, 150, 150, 90, 90, 90, 90, 90, 94, 94, 94, 59, 59, 59, 4, 4, 4, 4, 27, 27, 27, 27, 27, 18, 18, 18, 18, 206, 206, 206, 190, 190, 190, 190, 190, 73, 73, 73, 73, 73, 73, 106, 106, 106, 106, 9, 9, 9, 9, 9, 9, 78, 78, 49, 49, 195, 195, 195, 195, 195, 195, 202, 202, 202, 202, 202, 202, 202, 202, 30, 30, 30, 30, 53, 53, 53, 53, 53, 83, 83, 83, 139, 139, 139, 139, 139, 164, 164, 86, 86, 86, 86, 86, 170, 170, 170, 170, 136, 136, 136, 136, 136, 136];

let table5 = ['You are in a square room with a paradoxical box.', 'You are in a square room with a paradoxical box.', 'You are in a square room with a paradoxical box.', 'You are in a square room with a paradoxical box.', 'You are in a paradoxical room with a square box.', 'You are in a square room with a square box.', 'You are in a square room with a square box.', 'You are in a square room with a square box.', 'You are in a square room with a square box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a triangular room with a heptagonal box.', 'You are in a triangular room with a heptagonal box.', 'You are in a triangular room with a heptagonal box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a triangular room with a triangular box.', 'You are in a triangular room with a triangular box.', 'You are in a triangular room with a triangular box.', 'You are in a triangular room with a pentagonal box.', 'You are in a triangular room with a pentagonal box.', 'You are in a triangular room with a pentagonal box.', 'You are in a lens-shaped room with a square box.', 'You are in a lens-shaped room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a paradoxical room with a square box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a square room with a lens-shaped box.', 'You are in a square room with a lens-shaped box.', 'You are in a square room with a lens-shaped box.', 'You are in a square room with a lens-shaped box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a hexagonal room with a pentagonal box.', 'You are in a square room with a triangular box.', 'You are in a square room with a triangular box.', 'You are in a square room with a triangular box.', 'You are in a square room with a triangular box.', 'You are in a heptagonal room with a triangular box.', 'You are in a heptagonal room with a triangular box.', 'You are in a heptagonal room with a triangular box.', 'You are in a heptagonal room with a triangular box.', 'You are in a heptagonal room with a triangular box.', 'You are in a heptagonal room with a triangular box.', 'You are in a heptagonal room with a triangular box.', 'You are in a triangular room with a triangular box.', 'You are in a triangular room with a triangular box.', 'You are in a triangular room with a triangular box.', 'You are in a circular room with a hexagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a pentagonal room with a lens-shaped box.', 'You are in a pentagonal room with a lens-shaped box.', 'You are in a pentagonal room with a lens-shaped box.', 'You are in a pentagonal room with a lens-shaped box.', 'You are in a pentagonal room with a lens-shaped box.', 'You are in a triangular room with a triangular box.', 'You are in a triangular room with a triangular box.', 'You are in a triangular room with a triangular box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in a square room with a pentagonal box.', 'You are in an octagonal room with a triangular box.', 'You are in an octagonal room with a triangular box.', 'You are in an octagonal room with a triangular box.', 'You are in an octagonal room with a triangular box.', 'You are in an octagonal room with a triangular box.', 'You are in an octagonal room with a triangular box.', 'You are in an octagonal room with a triangular box.', 'You are in an octagonal room with a triangular box.', 'You are in a square room with a square box.', 'You are in a square room with a square box.', 'You are in a square room with a square box.', 'You are in a square room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a hexagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a triangular room with an octagonal box.', 'You are in a triangular room with an octagonal box.', 'You are in a triangular room with an octagonal box.', 'You are in a triangular room with a square box.', 'You are in a triangular room with a square box.', 'You are in a triangular room with a square box.', 'You are in a square room with a paradoxical box.', 'You are in a square room with a paradoxical box.', 'You are in a square room with a paradoxical box.', 'You are in a square room with a paradoxical box.', 'You are in a pentagonal room with a triangular box.', 'You are in a pentagonal room with a triangular box.', 'You are in a pentagonal room with a triangular box.', 'You are in a pentagonal room with a triangular box.', 'You are in a pentagonal room with a triangular box.', 'You are in a square room with a hexagonal box.', 'You are in a square room with a hexagonal box.', 'You are in a square room with a hexagonal box.', 'You are in a square room with a hexagonal box.', 'You are in a triangular room with a hexagonal box.', 'You are in a triangular room with a hexagonal box.', 'You are in a triangular room with a hexagonal box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a hexagonal room with a circular box.', 'You are in a hexagonal room with a circular box.', 'You are in a hexagonal room with a circular box.', 'You are in a hexagonal room with a circular box.', 'You are in a hexagonal room with a circular box.', 'You are in a hexagonal room with a circular box.', 'You are in a square room with a hexagonal box.', 'You are in a square room with a hexagonal box.', 'You are in a square room with a hexagonal box.', 'You are in a square room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a hexagonal room with a hexagonal box.', 'You are in a lens-shaped room with a pentagonal box.', 'You are in a lens-shaped room with a pentagonal box.', 'You are in a lens-shaped room with a square box.', 'You are in a lens-shaped room with a square box.', 'You are in a hexagonal room with a lens-shaped box.', 'You are in a hexagonal room with a lens-shaped box.', 'You are in a hexagonal room with a lens-shaped box.', 'You are in a hexagonal room with a lens-shaped box.', 'You are in a hexagonal room with a lens-shaped box.', 'You are in a hexagonal room with a lens-shaped box.', 'You are in an octagonal room with a square box.', 'You are in an octagonal room with a square box.', 'You are in an octagonal room with a square box.', 'You are in an octagonal room with a square box.', 'You are in an octagonal room with a square box.', 'You are in an octagonal room with a square box.', 'You are in an octagonal room with a square box.', 'You are in an octagonal room with a square box.', 'You are in a square room with a lens-shaped box.', 'You are in a square room with a lens-shaped box.', 'You are in a square room with a lens-shaped box.', 'You are in a square room with a lens-shaped box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a pentagonal room with a hexagonal box.', 'You are in a triangular room with a triangular box.', 'You are in a triangular room with a triangular box.', 'You are in a triangular room with a triangular box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a pentagonal room with a pentagonal box.', 'You are in a lens-shaped room with a hexagonal box.', 'You are in a lens-shaped room with a hexagonal box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a pentagonal room with a square box.', 'You are in a square room with an octagonal box.', 'You are in a square room with an octagonal box.', 'You are in a square room with an octagonal box.', 'You are in a square room with an octagonal box.', 'You are in a hexagonal room with a triangular box.', 'You are in a hexagonal room with a triangular box.', 'You are in a hexagonal room with a triangular box.', 'You are in a hexagonal room with a triangular box.', 'You are in a hexagonal room with a triangular box.', 'You are in a hexagonal room with a triangular box.'];

let table6 = ['L', 'L', 'L', 'L', 'X', 'Z', 'Z', 'Z', 'Z', 'R', 'R', 'R', 'R', 'R', 'R', 'U', 'U', 'U', 'T', 'T', 'T', 'T', 'T', 'T', 'S', 'S', 'S', 'E', 'E', 'E', 'F', 'F', 'Y', 'Y', 'Y', 'Y', 'Y', 'L', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'C', 'C', 'C', 'C', 'O', 'O', 'O', 'O', 'O', 'O', 'J', 'J', 'J', 'J', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'S', 'S', 'S', 'H', 'Y', 'Y', 'Y', 'Y', 'N', 'N', 'N', 'N', 'N', 'A', 'A', 'A', 'G', 'G', 'G', 'G', 'V', 'V', 'V', 'V', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'Z', 'Z', 'Z', 'Z', 'B', 'B', 'B', 'B', 'B', 'B', 'V', 'V', 'V', 'V', 'V', 'P', 'P', 'P', 'J', 'J', 'J', 'X', 'X', 'X', 'X', 'E', 'E', 'E', 'E', 'E', 'T', 'T', 'T', 'T', 'M', 'M', 'M', 'I', 'I', 'I', 'I', 'I', 'H', 'H', 'H', 'H', 'H', 'H', 'B', 'B', 'B', 'B', 'R', 'R', 'R', 'R', 'R', 'R', 'N', 'N', 'C', 'C', 'K', 'K', 'K', 'K', 'K', 'K', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'F', 'F', 'F', 'F', 'O', 'O', 'O', 'O', 'O', 'A', 'A', 'A', 'I', 'I', 'I', 'I', 'I', 'K', 'K', 'G', 'G', 'G', 'G', 'G', 'W', 'W', 'W', 'W', 'M', 'M', 'M', 'M', 'M', 'M'];

let different = [4, 37];
